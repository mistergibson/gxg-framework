var search_data = {"index":{"searchIndex":["addrinfo","array","blather","client","dsl","multiuserchat","muc","admin","members","invite","join","owner","configure","destroy","roster","stanza","presence","mucjoin","mucuser","status","class","ezmq","publisher","fcntl","file","float","gxg","bytearray","communications","bridge","bridgeadapter","bridgeadapterxmpp","database","database","externalauthority","ldapauthority","persistedarray","persistedhash","engine","entity","localsystem","remotesystem","enumerator","eventmanager","events","eventdispatcher","loggerdb","message","io","duplex","file","io","input","output","stringio","networking","ftpclient","httpclient","httpsclient","httpsclientwithpem","imapclient","pop3client","restclient","sftpclient","smtpclient","soapclient","soapdriver","sshclient","xmlrpcclient","xmppagent","xmppagentconversation","xmppagentfiletransfer","xmppagentinvitation","zmq","zmqadapter","zmqclient","zmqcontext","zmqpair","zmqpublisher","zmqpuller","zmqpusher","zmqserver","zmqsubscriber","zmqnode","returnresponse","storage","filespace","volume","support","library","commonioprepare","ioprepare","socketio","socketiorecvfrom","socketrw","stringioprepare","transcoding","transcodingio","tuple","units","bits","bytes","version","hash","io","integer","kernel","nilclass","object","padrino","helpers","taghelpers","string","stringio","struct","symbol","time","uri","generic","&()","*()","+()","-()","<<()","<<()","<<()","<<()","<<()","<<()","<=>()","<=>()","<=>()","==()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","[]=()","abilities()","abilities()","abort()","accept()","accept()","accept_file_transfer()","accept_invitation()","accordian_tag()","actor?()","add()","add_buddy()","add_message()","add_message_flags()","add_zmq_input()","add_zmq_output()","address_info()","adjust_event_queue()","affiliation()","affiliation=()","after()","alive?()","alive?()","alive?()","all_messages()","apportioned_ranges()","architecture()","assign_element_permission()","assoc()","associate()","async_download()","async_download()","async_upload()","async_upload()","at()","at()","attachment_template()","autocomplete_tag()","available_event_descriptors()","available_file_descriptors()","average()","base64?()","before()","binmode()","binmode()","binmode?()","binmode?()","body()","bridge()","buddies()","buffer_size()","buffer_size=()","byte_at()","byte_size_by_uuid()","bytes()","bytes_at()","call_event()","callmethod()","callmethod()","camel_case?()","cancel()","cancel_file_transfer()","cancel_timer()","cancelled?()","capability()","categories()","change_configuration()","change_directory()","change_ownership()","change_permissions()","channel_operations()","channels()","channels()","chars()","chat_buddies()","clear()","clear_all_element_locks()","clear_cache()","clear_cache()","clear_cache()","clear_cache()","clear_constraint()","clear_system_proxy()","client()","clone()","clone()","clone()","clone()","clone()","clone()","close()","close()","close()","close()","close_bridge()","close_channel()","close_read()","close_write()","closed?()","closed?()","closed?()","closed?()","closed?()","closed?()","code()","code=()","codepoints()","collect()","collect!()","combination()","compact()","compact!()","compose_reply()","concat()","configuration()","configuration()","configuration=()","connect()","connector()","connector()","constraint()","content_size_used()","context()","control_group()","conversations()","convert_to_string()","cookies()","cookies()","cookies()","copy()","copy_to_mailbox()","count()","cpuload()","create_conversation()","create_data()","create_destroy()","create_event_queue()","create_invite()","create_item()","create_mailbox()","create_password()","create_password()","create_reason()","create_reason()","create_vfs_permission()","credential()","cron()","currency_string()","current_user()","cycle()","daemon()","data()","data()","data=()","database()","datepicker_tag()","db_address()","db_address()","db_format()","db_formatted?()","db_list()","db_migration()","db_path()","db_permissions()","db_register()","db_unregister()","dclone()","deactivate()","deactivate()","debug()","decline()","decline()","decline_file_transfer()","decline_invitation()","decode64()","decode64!()","decrypt()","default_room_configuration()","delete()","delete()","delete()","delete()","delete()","delete()","delete_at()","delete_at()","delete_event_queue()","delete_if()","descendants()","descriptor_heap_used()","descriptor_limits()","destroy()","destroy()","destroy()","destroy_by_uuid()","destroy_vfs_permission()","detach()","detail_mapping()","determine_engine_load()","determine_event_allocations()","determine_loads()","determine_memory_load()","dialog_tag()","directory()","disassociate()","disconnected()","discover()","download()","download()","download_directory()","download_directory()","download_directory=()","download_directory=()","drop()","drop_while()","dup()","dup()","dup()","dup()","dup()","dup()","each()","each()","each()","each()","each_byte()","each_byte()","each_byte_with_index()","each_char()","each_char()","each_char()","each_char_with_index()","each_codepoint()","each_codepoint()","each_codepoint_with_index()","each_index()","each_index()","each_line()","each_line()","each_line()","each_line_with_index()","each_pair()","each_transcoded_byte()","each_with_index()","each_with_index()","each_with_index()","effective_element_permission()","effective_uuid_permission()","effective_vfs_permission()","egid()","element_byte_size()","element_create()","element_destroy()","element_exists?()","element_in_trash?()","element_in_use?()","element_manifest()","element_parent_address()","element_permissions()","element_permissions_by_uuid()","element_permissions_manifest()","element_recover()","element_retrieve()","element_table_by_index()","element_table_for_instance()","element_table_index()","element_tables()","element_update()","element_version()","element_version()","empty?()","empty_trash()","encode64()","encode64!()","encoded_value()","encrypt()","enforce_permission_policy()","engine()","engine_data_keys()","engine_gear()","engine_load()","engine_load_high?()","engine_load_low?()","engine_load_medium?()","entities()","entitiies()","entity_status()","entity_status()","entries()","entries()","entries()","entries()","environment()","eof?()","eql?()","error()","euid()","event_allocation_envelope()","event_descriptors_threshold()","event_minimum_threshold()","events_in_use()","every()","exec()","exist?()","exist?()","exit()","exit!()","export()","export()","extend_element_permissions()","external_conversion()","external_conversion=()","external_encoding=()","external_encoding=()","external_field_separator()","external_field_separator=()","external_newline()","external_newline=()","external_record_separator()","external_record_separator=()","fail()","fcntl()","fcntl()","fetch()","fetch_manifest()","fetch_message()","field_separator_used()","file_descriptors()","file_details()","file_system?()","file_transfers()","file_transfers()","file_type()","fill()","filter_data()","filter_parameters()","find_file_mimetype()","find_file_transfer()","find_index()","find_index()","find_local()","first()","flags()","flags()","flags()","flatten()","flatten!()","fork()","format()","format=()","format_create()","format_destroy()","format_list()","format_load()","format_template()","format_update()","fragment()","fragment=()","freeze()","from_hash()","from_json()","gear()","get()","get()","get()","get()","get_at_path()","get_at_path()","get_at_path()","get_at_path()","get_at_path()","get_at_path()","get_configuration()","get_delegate()","get_delegate()","get_engine_data()","get_file()","get_handler_class()","get_message()","get_messages_by_context()","get_messages_by_sender()","get_permissions()","get_permissions()","get_permissions()","get_permissions()","get_quota()","get_reservation()","get_reservation()","get_status()","getbyte()","getbyte()","getbytes()","getc()","getc()","getpgid()","getpgrp()","getpriority()","getrlimit()","gets()","gets()","gid()","group_create()","group_credential()","group_delete()","group_exist?()","group_fetch()","group_manifest()","group_roles()","group_update()","groups()","gxg_button_tag()","gxg_export()","gxg_export()","gxg_import()","gxg_import()","gxg_message_to_xmpp()","gxg_permissions_to_mode()","gxg_permissions_to_unix()","halt()","halt_zmq_processing()","handle()","handle_error()","hash()","heap_used()","help()","host()","host()","host=()","hostname()","hostname=()","html?()","id()","identity()","import()","import()","import_services_file()","import_update()","in()","in_progress?()","include?()","include?()","include?()","increment()","increment_version()","increment_version()","index()","indexes()","indices()","info()","info()","inherit()","initgroups()","initialize_clone()","initialize_clone()","initialize_clone()","initialize_clone()","initialize_clone()","initialize_clone()","initialize_copy()","initialize_dup()","initialize_dup()","initialize_dup()","initialize_dup()","initialize_dup()","initialize_dup()","insert()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect_queue()","inspect_timers()","interface()","interface()","interface()","interface()","internal_conversion()","internal_conversion=()","internal_encoding()","internal_encoding=()","internal_field_separator()","internal_field_separator=()","internal_newline()","internal_newline=()","internal_record_separator()","internal_record_separator=()","interpret()","interpret_mode()","interpret_units()","intitialize()","invitation()","invitations()","invite()","invite_from()","invite_to()","invite_to=()","is_any?()","iterative()","iterative()","iterative()","iterative()","iterative()","iterative_persist()","jid()","jid()","jid()","jid=()","jid_domain()","jid_node()","jid_resource()","join()","join()","join()","join()","join_channel()","join_conversation()","json?()","json_1?()","json_2?()","keep_if()","key()","key=()","keys()","keys()","keys()","kill()","last()","latency_reading()","latency_reading()","leave()","leave()","length()","limits()","limits()","lineno()","lineno=()","lines()","list()","list_subscriptions()","listen()","load_average()","login()","login()","login()","login()","login()","login()","login()","login()","login()","logout()","logout()","logout()","logout()","logout()","logout()","logout()","logout()","logout()","lstat()","make_directory()","make_directory()","make_link()","manager_running?()","map()","map!()","match()","maxgroups()","maximum_buffer_size()","maximum_event_descriptors()","maximum_file_descriptors()","maxsize()","maxsize=()","members()","memory()","memory_available()","memory_gear()","memory_limits()","memory_load()","memory_load_high?()","memory_load_low?()","memory_load_medium?()","memory_used()","message_count()","message_template()","millisecond_latency()","mime_type()","mime_type()","mkdir()","mkdir()","mkfile()","mkpath()","mode_permission_to_gxg()","mode_permission_to_unix()","mount()","mount()","mount_mode()","mounted?()","mounted?()","move()","move_to_mailbox()","my_id()","my_id()","my_jid()","my_roster()","network()","network_next_port()","network_port_used?()","network_status()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_selector()","new_structure_from_format()","newline_option_used()","newline_used()","next()","next_message()","next_values()","nitems()","notify()","notify()","notify()","numeric_values()","object_memory_used()","on()","on()","on_before_dispatch()","on_create_document()","on_response_document()","online_availability_values()","opaque()","opaque=()","open()","open()","open()","open()","open?()","open?()","open?()","open_bridge()","open_channel()","open_remote_file()","outervalue()","outervalue=()","pack()","padvalue()","padvalue=()","parent()","parent()","parent=()","parse()","parse()","pass()","passes_needed()","password()","password()","password()","password=()","password=()","password=()","password=()","path()","path=()","path_prefix()","paths_to()","paths_to()","paths_to()","paths_to()","paths_to()","paths_to()","pattern_range()","pattern_ranges()","pause_event_queue()","peek()","peek_values()","pending?()","pending?()","percent_completed()","permission_policy()","permission_policy_load()","permission_policy_save()","permutation()","persistable?()","pid()","pipe()","platform()","pop()","pop()","port()","pos()","pos=()","post()","post()","post()","post()","post_event()","post_to_event_queue()","ppid()","prepare_conversion_options()","present_directory()","print()","printf()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process!()","process!()","process!()","process!()","process!()","process!()","process!()","process_parameters()","process_params_classes_error()","process_params_classes_error()","process_params_classes_valid()","process_params_classes_valid()","process_params_default_object()","process_params_default_object()","process_received()","processes()","product()","profile()","profile()","profile()","profile()","profile()","protocol()","protocol()","publish_and_subscribe()","push()","push()","push()","put()","put()","put()","put()","put_codepoint()","put_file()","putc()","puts()","putwc()","query()","query=()","radio_group()","radio_tag()","rassoc()","read()","read()","read()","read_latency()","read_latency()","read_nonblock()","read_nonblock()","readbyte()","readchar()","readline()","readlines()","readpartial()","readpartial()","readpartial()","reason()","reason=()","reason=()","receive()","reconstitute()","record_separator_used()","recv()","recvfrom()","recvmsg()","reference()","refresh_conversations()","refresh_file_transfers()","refresh_invitations()","refresh_links()","refresh_links()","refresh_units_registry()","register_handler_class()","register_with_server()","registered_protocols()","registration_fields()","registration_info()","registry()","registry=()","reject()","reject!()","release_element_locks()","release_event_descriptor()","release_reservation()","release_reservation()","remove_buddy()","remove_directory()","remove_directory()","remove_element_permissions()","remove_file()","remove_mailbox()","remove_message_flags()","remove_messages()","remove_registration()","remove_remote_file()","remove_zmq_input()","remove_zmq_output()","rename()","rename()","rename()","rename_file()","rename_mailbox()","reopen()","repeated_combination()","repeated_permutation()","replace()","reply()","request()","request()","reservation()","reservation()","reservation_add_element()","reservation_remove_element()","reserve_element_locks()","reserve_event_descriptor()","resolve_host()","respond_to_event?()","result()","resume_zmq_processing()","retrieve_by_address()","retrieve_by_uuid()","retrieve_messages()","reverse()","reverse!()","reverse_each()","revoke_element_permissions()","revoke_permissions()","revoke_permissions()","revoke_permissions_by_uuid()","rewind()","rewind()","rindex()","rmdir()","rmdir()","rmfile()","rmfile()","role()","role=()","role_add_user()","role_create()","role_destroy()","role_exist?()","role_fetch()","role_group()","role_member?()","role_members()","role_remove_user()","role_update()","rotate()","rotate!()","running?()","sample()","save()","save()","save_version()","save_version()","say()","say()","say_something()","scheme()","scheme=()","search()","search()","search()","search()","search()","search()","search()","search()","search()","search()","search()","search_database()","select()","select!()","send()","send()","send()","send()","send_account_info()","send_caps()","send_command()","send_command()","send_file()","send_invitations()","send_message()","send_message()","sender()","sendmsg()","serialize()","serialize()","serialized?()","service_ports()","service_ports_register()","service_ports_register_alias()","service_ports_register_client()","service_ports_register_usage()","service_ports_remove_alias()","service_ports_remove_client()","service_ports_search()","service_ports_usage_preference()","services_file()","session_id()","set_at_path()","set_at_path()","set_at_path()","set_at_path()","set_at_path()","set_at_path()","set_caps()","set_configuration()","set_constraint()","set_default_configuration()","set_delegate()","set_delegate()","set_element_version()","set_element_version()","set_engine_data()","set_format()","set_fragment()","set_host()","set_key()","set_message_attributes()","set_opaque()","set_parent()","set_parent()","set_password()","set_path()","set_permissions()","set_permissions()","set_permissions()","set_permissions()","set_permissions_recursive()","set_query()","set_registry()","set_scheme()","set_status()","set_system_proxy()","set_title()","set_title()","set_userinfo()","set_version()","set_version()","setpgid()","setpgrp()","setpriority()","setrlimit()","setsid()","setting_keys()","shell()","shift()","shuffle()","shuffle!()","shutdown()","shutdown()","size()","size()","size()","slice()","slice!()","slice_bytes()","slider_tag()","slots_used()","socket()","sort()","sort()","sort!()","sort_by!()","spawn()","spinner_tab()","split_camelcase()","sql_statement?()","startup()","stat()","status()","status()","status()","status=()","status=()","structural_link()","structure_attached?()","structure_attached?()","structure_attached?()","structure_detach()","structure_detach()","structure_detach()","subject()","subject=()","subpath()","subscribe()","subscribe()","succeed()","symbolize_keys()","sync_export()","sync_export()","sync_export()","sync_import()","synchronize_records()","sysread()","sysread()","system_info()","syswrite()","syswrite()","tabs_tag()","take()","take_while()","templates()","templates()","terminate()","theaded_list()","tick()","times()","title()","title()","title()","title=()","to_a()","to_ary()","to_datetime()","to_hash()","to_json()","to_path()","to_s()","to_s()","to_s()","to_s()","to_uri()","to_uri()","transcode()","transcode!()","transcode_options()","transcode_to_external()","transcode_to_internal()","transcoded_bytes()","transpose()","try_convert()","try_persist()","ufs()","ufs()","uid()","uid_list()","unbind()","unget_transcoded_byte()","unget_transcoded_bytes()","ungetbyte()","ungetbyte()","ungetbytes()","ungetbytes()","ungetc()","ungetc()","ungets()","ungets()","uniq()","uniq!()","unit_interpreters()","unix_permissions_to_gxg()","unload()","unload()","unlock()","unmount()","unmount()","unpack_bytes()","unpause_event_queue()","unpersist()","unpersist()","unregister_handler_class()","unserialize()","unshift()","unsubscribe()","unsubscribe()","update_vfs_permission()","upload()","upload()","upload_file()","upload_message()","uri_info()","user()","user=()","user_create()","user_credential()","user_destroy()","user_exist?()","user_fetch()","user_id_available?()","user_manifest()","user_roles()","user_set_password()","user_update()","userinfo()","uuid()","uuid()","uuid()","uuid()","uuid()","uuid()","uuid=()","uuid_generate()","uuid_list()","valid_date?()","valid_datetime?()","valid_datetime_nolocale?()","valid_domain_name?()","valid_field_classes()","valid_jid?()","valid_mode_set()","valid_modes()","valid_modes()","valid_path?()","valid_path?()","valid_time?()","valid_uri?()","valid_uuid?()","value()","value()","value=()","values_at()","version()","version()","version=()","version=()","vetted_parameters()","vfs_permission()","vfs_permission_exist?()","vfs_permission_manifest()","volume_of_path()","wait()","wait2()","wait_for_reservation()","wait_for_reservation()","waitall()","waitpid()","waitpid2()","warning()","wget()","when_ready()","with_index()","with_object()","write()","write()","write()","write()","write()","write_latency()","write_latency()","write_nonblock()","write_nonblock()","write_permission?()","write_permission?()","write_reserved?()","write_reserved?()","write_to_stream()","write_with_handler()","xlist()","xml?()","xmpp_message_to_gxg()","zip()","zmq_default_context()","zmq_error_handler()","zmq_handler()","zmq_inputs()","zmq_outputs()","zmq_process()","zmq_processing?()","zmq_supported_protocols()","|()","readme","gxg.gemspec"],"longSearchIndex":["addrinfo","array","blather","blather::client","blather::dsl","blather::dsl::multiuserchat","blather::muc","blather::muc::admin","blather::muc::admin::members","blather::muc::invite","blather::muc::join","blather::muc::owner","blather::muc::owner::configure","blather::muc::owner::destroy","blather::roster","blather::stanza","blather::stanza::presence","blather::stanza::presence::mucjoin","blather::stanza::presence::mucuser","blather::stanza::presence::mucuser::status","class","ezmq","ezmq::publisher","fcntl","file","float","gxg","gxg::bytearray","gxg::communications","gxg::communications::bridge","gxg::communications::bridgeadapter","gxg::communications::bridgeadapterxmpp","gxg::database","gxg::database::database","gxg::database::externalauthority","gxg::database::ldapauthority","gxg::database::persistedarray","gxg::database::persistedhash","gxg::engine","gxg::entity","gxg::entity::localsystem","gxg::entity::remotesystem","gxg::enumerator","gxg::eventmanager","gxg::events","gxg::events::eventdispatcher","gxg::events::loggerdb","gxg::events::message","gxg::io","gxg::io::duplex","gxg::io::file","gxg::io::io","gxg::io::input","gxg::io::output","gxg::io::stringio","gxg::networking","gxg::networking::ftpclient","gxg::networking::httpclient","gxg::networking::httpsclient","gxg::networking::httpsclientwithpem","gxg::networking::imapclient","gxg::networking::pop3client","gxg::networking::restclient","gxg::networking::sftpclient","gxg::networking::smtpclient","gxg::networking::soapclient","gxg::networking::soapdriver","gxg::networking::sshclient","gxg::networking::xmlrpcclient","gxg::networking::xmppagent","gxg::networking::xmppagentconversation","gxg::networking::xmppagentfiletransfer","gxg::networking::xmppagentinvitation","gxg::networking::zmq","gxg::networking::zmq::zmqadapter","gxg::networking::zmq::zmqclient","gxg::networking::zmq::zmqcontext","gxg::networking::zmq::zmqpair","gxg::networking::zmq::zmqpublisher","gxg::networking::zmq::zmqpuller","gxg::networking::zmq::zmqpusher","gxg::networking::zmq::zmqserver","gxg::networking::zmq::zmqsubscriber","gxg::networking::zmqnode","gxg::returnresponse","gxg::storage","gxg::storage::filespace","gxg::storage::volume","gxg::support","gxg::support::library","gxg::support::library::commonioprepare","gxg::support::library::ioprepare","gxg::support::library::socketio","gxg::support::library::socketiorecvfrom","gxg::support::library::socketrw","gxg::support::library::stringioprepare","gxg::support::library::transcoding","gxg::support::library::transcodingio","gxg::tuple","gxg::units","gxg::units::bits","gxg::units::bytes","gxg::version","hash","io","integer","kernel","nilclass","object","padrino","padrino::helpers","padrino::helpers::taghelpers","string","stringio","struct","symbol","time","uri","uri::generic","gxg::bytearray#&()","gxg::bytearray#*()","gxg::bytearray#+()","gxg::bytearray#-()","gxg::bytearray#<<()","gxg::database::persistedarray#<<()","gxg::io::io#<<()","gxg::io::stringio#<<()","gxg::networking::xmppagent#<<()","gxg::support::library::socketrw#<<()","gxg::bytearray#<=>()","gxg::tuple#<=>()","gxg::version#<=>()","gxg::bytearray#==()","gxg::bytearray::[]()","gxg::bytearray#[]()","gxg::database::database#[]()","gxg::database::persistedarray#[]()","gxg::database::persistedhash#[]()","gxg::engine::[]()","gxg::entity::localsystem#[]()","gxg::events::message#[]()","gxg::networking::xmppagentconversation#[]()","gxg::networking::xmppagentinvitation#[]()","gxg::bytearray#[]=()","gxg::database::database#[]=()","gxg::database::persistedarray#[]=()","gxg::database::persistedhash#[]=()","gxg::events::message#[]=()","gxg::communications::bridgeadapter::abilities()","gxg::communications::bridgeadapterxmpp::abilities()","gxg::engine::abort()","gxg::networking::xmppagentfiletransfer#accept()","gxg::networking::xmppagentinvitation#accept()","gxg::communications::bridgeadapterxmpp#accept_file_transfer()","gxg::communications::bridgeadapterxmpp#accept_invitation()","padrino::helpers::taghelpers#accordian_tag()","object#actor?()","blather::roster#add()","gxg::networking::xmppagent#add_buddy()","gxg::networking::xmppagentconversation#add_message()","gxg::networking::imapclient#add_message_flags()","gxg::networking::zmqnode#add_zmq_input()","gxg::networking::zmqnode#add_zmq_output()","uri::generic#address_info()","gxg::events::eventdispatcher#adjust_event_queue()","blather::stanza::presence::mucuser#affiliation()","blather::stanza::presence::mucuser#affiliation=()","gxg::networking::xmppagent#after()","gxg::database::persistedarray#alive?()","gxg::database::persistedhash#alive?()","object#alive?()","gxg::communications::bridgeadapterxmpp#all_messages()","gxg::apportioned_ranges()","gxg::entity::localsystem#architecture()","gxg::database::database#assign_element_permission()","gxg::bytearray#assoc()","gxg::communications::bridgeadapterxmpp#associate()","gxg::networking::sftpclient#async_download()","gxg::networking::sshclient#async_download()","gxg::networking::sftpclient#async_upload()","gxg::networking::sshclient#async_upload()","gxg::bytearray#at()","gxg::events::eventdispatcher#at()","gxg::networking::smtpclient#attachment_template()","padrino::helpers::taghelpers#autocomplete_tag()","gxg::engine::available_event_descriptors()","gxg::engine::available_file_descriptors()","array#average()","string#base64?()","gxg::networking::xmppagent#before()","gxg::io::stringio#binmode()","stringio#binmode()","gxg::io::stringio#binmode?()","stringio#binmode?()","gxg::events::message#body()","gxg::communications::bridge()","gxg::networking::xmppagent#buddies()","gxg::networking::xmppagentfiletransfer#buffer_size()","gxg::networking::xmppagentfiletransfer#buffer_size=()","string#byte_at()","gxg::database::database#byte_size_by_uuid()","gxg::support::library::transcodingio#bytes()","string#bytes_at()","gxg::communications::bridge#call_event()","gxg::networking::soapclient#callmethod()","gxg::networking::xmlrpcclient#callmethod()","string#camel_case?()","gxg::networking::xmppagentfiletransfer#cancel()","gxg::communications::bridgeadapterxmpp#cancel_file_transfer()","gxg::events::eventdispatcher#cancel_timer()","gxg::networking::xmppagentfiletransfer#cancelled?()","gxg::networking::imapclient#capability()","gxg::units::bytes::categories()","gxg::networking::xmppagentconversation#change_configuration()","gxg::networking::ftpclient#change_directory()","gxg::networking::sftpclient#change_ownership()","gxg::networking::sftpclient#change_permissions()","gxg::networking::sshclient#channel_operations()","gxg::communications::bridgeadapter#channels()","gxg::communications::bridgeadapterxmpp#channels()","gxg::support::library::transcodingio#chars()","gxg::networking::xmppagentconversation#chat_buddies()","gxg::bytearray#clear()","gxg::database::database#clear_all_element_locks()","gxg::networking::httpclient#clear_cache()","gxg::networking::httpsclient#clear_cache()","gxg::networking::httpsclientwithpem#clear_cache()","gxg::networking::restclient#clear_cache()","gxg::database::persistedarray#clear_constraint()","gxg::networking::restclient::clear_system_proxy()","gxg::networking::xmppagent#client()","float#clone()","gxg::bytearray#clone()","gxg::database::database#clone()","nilclass#clone()","struct#clone()","symbol#clone()","gxg::communications::bridgeadapter#close()","gxg::database::database#close()","gxg::io::stringio#close()","gxg::networking::zmq::zmqadapter#close()","gxg::communications::close_bridge()","gxg::communications::bridgeadapterxmpp#close_channel()","gxg::io::stringio#close_read()","gxg::io::stringio#close_write()","gxg::networking::ftpclient#closed?()","gxg::networking::sftpclient#closed?()","gxg::networking::soapclient#closed?()","gxg::networking::sshclient#closed?()","gxg::networking::xmlrpcclient#closed?()","gxg::networking::xmppagentconversation#closed?()","blather::stanza::presence::mucuser::status#code()","blather::stanza::presence::mucuser::status#code=()","gxg::support::library::transcodingio#codepoints()","gxg::bytearray#collect()","gxg::bytearray#collect!()","gxg::bytearray#combination()","gxg::bytearray#compact()","gxg::bytearray#compact!()","gxg::events::message#compose_reply()","gxg::bytearray#concat()","blather::dsl::multiuserchat#configuration()","gxg::networking::xmppagentconversation#configuration()","blather::dsl::multiuserchat#configuration=()","gxg::database::connect()","gxg::database::database#connector()","gxg::networking::imapclient#connector()","gxg::database::persistedarray#constraint()","kernel#content_size_used()","gxg::networking::zmq::zmqadapter#context()","padrino::helpers::taghelpers#control_group()","gxg::networking::xmppagent#conversations()","gxg::support::library::transcoding#convert_to_string()","gxg::networking::httpclient#cookies()","gxg::networking::httpsclient#cookies()","gxg::networking::httpsclientwithpem#cookies()","gxg::storage::filespace#copy()","gxg::networking::imapclient#copy_to_mailbox()","gxg::bytearray#count()","gxg::entity::localsystem#cpuload()","gxg::networking::xmppagent#create_conversation()","blather::muc::owner::configure#create_data()","blather::muc::owner::destroy#create_destroy()","gxg::events::eventdispatcher#create_event_queue()","blather::muc::invite#create_invite()","blather::muc::admin::members#create_item()","gxg::networking::imapclient#create_mailbox()","blather::muc::invite#create_password()","blather::muc::join#create_password()","blather::muc::invite#create_reason()","blather::muc::owner::destroy#create_reason()","gxg::database::database#create_vfs_permission()","gxg::storage::volume#credential()","gxg::events::eventdispatcher#cron()","padrino::helpers::taghelpers#currency_string()","gxg::entity::localsystem#current_user()","gxg::bytearray#cycle()","gxg::engine::daemon()","blather::muc::owner::configure#data()","gxg::bytearray#data()","blather::muc::owner::configure#data=()","gxg::storage::volume#database()","padrino::helpers::taghelpers#datepicker_tag()","gxg::database::persistedarray#db_address()","gxg::database::persistedhash#db_address()","gxg::database::database#db_format()","gxg::database::database#db_formatted?()","gxg::database::database#db_list()","gxg::database::database#db_migration()","gxg::storage::volume#db_path()","gxg::database::database#db_permissions()","gxg::database::database#db_register()","gxg::database::database#db_unregister()","gxg::bytearray#dclone()","gxg::database::persistedarray#deactivate()","gxg::database::persistedhash#deactivate()","gxg::returnresponse#debug()","gxg::networking::xmppagentfiletransfer#decline()","gxg::networking::xmppagentinvitation#decline()","gxg::communications::bridgeadapterxmpp#decline_file_transfer()","gxg::communications::bridgeadapterxmpp#decline_invitation()","string#decode64()","string#decode64!()","string#decrypt()","gxg::networking::xmppagentconversation#default_room_configuration()","gxg::bytearray#delete()","gxg::database::persistedhash#delete()","gxg::networking::httpclient#delete()","gxg::networking::httpsclient#delete()","gxg::networking::httpsclientwithpem#delete()","gxg::networking::restclient#delete()","gxg::bytearray#delete_at()","gxg::database::persistedarray#delete_at()","gxg::events::eventdispatcher#delete_event_queue()","gxg::bytearray#delete_if()","class#descendants()","gxg::engine::descriptor_heap_used()","gxg::engine::descriptor_limits()","blather::dsl::multiuserchat#destroy()","gxg::database::persistedarray#destroy()","gxg::database::persistedhash#destroy()","gxg::database::database#destroy_by_uuid()","gxg::database::database#destroy_vfs_permission()","gxg::engine::detach()","gxg::engine::detail_mapping()","gxg::engine::determine_engine_load()","gxg::engine::determine_event_allocations()","gxg::engine::determine_loads()","gxg::engine::determine_memory_load()","padrino::helpers::taghelpers#dialog_tag()","gxg::storage::volume#directory()","gxg::communications::bridgeadapterxmpp#disassociate()","gxg::networking::xmppagent#disconnected()","gxg::networking::xmppagent#discover()","gxg::networking::sftpclient#download()","gxg::networking::sshclient#download()","gxg::networking::xmppagent#download_directory()","gxg::networking::xmppagentfiletransfer#download_directory()","gxg::networking::xmppagent#download_directory=()","gxg::networking::xmppagentfiletransfer#download_directory=()","gxg::bytearray#drop()","gxg::bytearray#drop_while()","float#dup()","gxg::bytearray#dup()","gxg::database::database#dup()","nilclass#dup()","struct#dup()","symbol#dup()","gxg::bytearray#each()","gxg::database::persistedarray#each()","gxg::enumerator#each()","gxg::support::library::transcodingio#each()","gxg::support::library::transcodingio#each_byte()","string#each_byte()","string#each_byte_with_index()","gxg::support::library::socketrw#each_char()","gxg::support::library::transcodingio#each_char()","string#each_char()","string#each_char_with_index()","gxg::support::library::transcodingio#each_codepoint()","string#each_codepoint()","string#each_codepoint_with_index()","gxg::bytearray#each_index()","gxg::database::persistedarray#each_index()","gxg::support::library::socketrw#each_line()","gxg::support::library::transcodingio#each_line()","string#each_line()","string#each_line_with_index()","gxg::database::persistedhash#each_pair()","gxg::support::library::transcodingio#each_transcoded_byte()","gxg::bytearray#each_with_index()","gxg::database::persistedarray#each_with_index()","gxg::enumerator#each_with_index()","gxg::database::database#effective_element_permission()","gxg::database::database#effective_uuid_permission()","gxg::database::database#effective_vfs_permission()","gxg::engine::egid()","gxg::database::database#element_byte_size()","gxg::database::database#element_create()","gxg::database::database#element_destroy()","gxg::database::database#element_exists?()","gxg::database::database#element_in_trash?()","gxg::database::database#element_in_use?()","gxg::database::database#element_manifest()","gxg::database::database#element_parent_address()","gxg::database::database#element_permissions()","gxg::database::database#element_permissions_by_uuid()","gxg::database::database#element_permissions_manifest()","gxg::database::database#element_recover()","gxg::database::database#element_retrieve()","gxg::database::database::element_table_by_index()","gxg::database::database::element_table_for_instance()","gxg::database::database::element_table_index()","gxg::database::database::element_tables()","gxg::database::database#element_update()","gxg::database::persistedarray#element_version()","gxg::database::persistedhash#element_version()","gxg::bytearray#empty?()","gxg::database::database#empty_trash()","string#encode64()","string#encode64!()","gxg::version#encoded_value()","string#encrypt()","gxg::database::database#enforce_permission_policy()","gxg::entity::localsystem#engine()","gxg::engine::engine_data_keys()","gxg::engine::engine_gear()","gxg::engine::engine_load()","gxg::engine::engine_load_high?()","gxg::engine::engine_load_low?()","gxg::engine::engine_load_medium?()","gxg::communications::bridgeadapterxmpp#entities()","gxg::communications::bridgeadapter#entitiies()","gxg::communications::bridgeadapter#entity_status()","gxg::communications::bridgeadapterxmpp#entity_status()","gxg::networking::ftpclient#entries()","gxg::networking::sftpclient#entries()","gxg::storage::filespace#entries()","gxg::storage::volume#entries()","gxg::entity::localsystem#environment()","gxg::support::library::socketrw#eof?()","gxg::bytearray#eql?()","gxg::returnresponse#error()","gxg::engine::euid()","gxg::engine::event_allocation_envelope()","gxg::engine::event_descriptors_threshold()","gxg::engine::event_minimum_threshold()","gxg::engine::events_in_use()","gxg::events::eventdispatcher#every()","gxg::engine::exec()","gxg::storage::filespace#exist?()","gxg::storage::volume#exist?()","gxg::engine::exit()","gxg::engine::exit!()","gxg::database::persistedarray#export()","gxg::database::persistedhash#export()","gxg::database::database#extend_element_permissions()","gxg::support::library::transcodingio#external_conversion()","gxg::support::library::transcodingio#external_conversion=()","gxg::io::io#external_encoding=()","gxg::io::stringio#external_encoding=()","gxg::support::library::transcodingio#external_field_separator()","gxg::support::library::transcodingio#external_field_separator=()","gxg::support::library::transcodingio#external_newline()","gxg::support::library::transcodingio#external_newline=()","gxg::support::library::transcodingio#external_record_separator()","gxg::support::library::transcodingio#external_record_separator=()","gxg::events::message#fail()","gxg::io::io#fcntl()","stringio#fcntl()","gxg::bytearray#fetch()","gxg::networking::imapclient#fetch_manifest()","gxg::networking::imapclient#fetch_message()","gxg::support::library::transcoding#field_separator_used()","gxg::engine::file_descriptors()","gxg::networking::xmppagentfiletransfer#file_details()","gxg::storage::volume#file_system?()","gxg::communications::bridgeadapterxmpp#file_transfers()","gxg::networking::xmppagent#file_transfers()","file#file_type()","gxg::bytearray#fill()","gxg::bytearray#filter_data()","gxg::bytearray#filter_parameters()","file::find_file_mimetype()","gxg::networking::xmppagent#find_file_transfer()","gxg::bytearray#find_index()","gxg::database::persistedarray#find_index()","gxg#find_local()","gxg::bytearray#first()","gxg::io::stringio#flags()","io#flags()","stringio#flags()","gxg::bytearray#flatten()","gxg::bytearray#flatten!()","gxg::engine::fork()","gxg::database::persistedhash#format()","gxg::database::persistedhash#format=()","gxg::database::database#format_create()","gxg::database::database#format_destroy()","gxg::database::database#format_list()","gxg::database::database#format_load()","gxg::database::database#format_template()","gxg::database::database#format_update()","uri::generic#fragment()","uri::generic#fragment=()","gxg::bytearray#freeze()","uri::generic#from_hash()","string#from_json()","gxg::engine::gear()","gxg::networking::httpclient#get()","gxg::networking::httpsclient#get()","gxg::networking::httpsclientwithpem#get()","gxg::networking::restclient#get()","array#get_at_path()","gxg::bytearray#get_at_path()","gxg::database::persistedarray#get_at_path()","gxg::database::persistedhash#get_at_path()","gxg::events::message#get_at_path()","hash#get_at_path()","blather::dsl::multiuserchat#get_configuration()","gxg::database::persistedarray#get_delegate()","gxg::database::persistedhash#get_delegate()","gxg::engine::get_engine_data()","gxg::networking::ftpclient#get_file()","gxg::networking::get_handler_class()","gxg::communications::bridgeadapterxmpp#get_message()","gxg::communications::bridgeadapterxmpp#get_messages_by_context()","gxg::communications::bridgeadapterxmpp#get_messages_by_sender()","gxg::database::persistedarray#get_permissions()","gxg::database::persistedhash#get_permissions()","gxg::storage::filespace#get_permissions()","gxg::storage::volume#get_permissions()","gxg::networking::imapclient#get_quota()","gxg::database::persistedarray#get_reservation()","gxg::database::persistedhash#get_reservation()","gxg::networking::xmppagent#get_status()","gxg::support::library::socketrw#getbyte()","gxg::support::library::transcodingio#getbyte()","gxg::support::library::transcodingio#getbytes()","gxg::support::library::socketrw#getc()","gxg::support::library::transcodingio#getc()","gxg::engine::getpgid()","gxg::engine::getpgrp()","gxg::engine::getpriority()","gxg::engine::getrlimit()","gxg::support::library::socketrw#gets()","gxg::support::library::transcodingio#gets()","gxg::engine::gid()","gxg::database::database#group_create()","gxg::database::database#group_credential()","gxg::database::database#group_delete()","gxg::database::database#group_exist?()","gxg::database::database#group_fetch()","gxg::database::database#group_manifest()","gxg::database::database#group_roles()","gxg::database::database#group_update()","gxg::engine::groups()","padrino::helpers::taghelpers#gxg_button_tag()","array#gxg_export()","hash#gxg_export()","array::gxg_import()","hash::gxg_import()","gxg::networking::xmppagent#gxg_message_to_xmpp()","file::gxg_permissions_to_mode()","file::gxg_permissions_to_unix()","gxg::networking::xmppagent#halt()","gxg::networking::zmqnode#halt_zmq_processing()","gxg::networking::xmppagent#handle()","object#handle_error()","gxg::bytearray#hash()","object#heap_used()","gxg::networking::ftpclient#help()","gxg::networking::smtpclient#host()","uri::generic#host()","uri::generic#host=()","uri::generic#hostname()","uri::generic#hostname=()","string#html?()","gxg::events::message#id()","gxg::networking::zmq::zmqadapter#identity()","blather::muc::invite::import()","gxg::database::database#import()","gxg::entity::localsystem#import_services_file()","gxg::database::persistedhash#import_update()","gxg::events::eventdispatcher#in()","gxg::networking::xmppagentfiletransfer#in_progress?()","gxg::bytearray#include?()","gxg::database::persistedarray#include?()","gxg::database::persistedhash#include?()","gxg::version#increment()","gxg::database::persistedarray#increment_version()","gxg::database::persistedhash#increment_version()","gxg::bytearray#index()","gxg::bytearray#indexes()","gxg::bytearray#indices()","gxg::networking::xmppagentfiletransfer#info()","gxg::returnresponse#info()","blather::muc::invite#inherit()","gxg::engine::initgroups()","float#initialize_clone()","gxg::bytearray#initialize_clone()","gxg::database::database#initialize_clone()","nilclass#initialize_clone()","struct#initialize_clone()","symbol#initialize_clone()","gxg::bytearray#initialize_copy()","float#initialize_dup()","gxg::bytearray#initialize_dup()","gxg::database::database#initialize_dup()","nilclass#initialize_dup()","struct#initialize_dup()","symbol#initialize_dup()","gxg::bytearray#insert()","gxg::bytearray#inspect()","gxg::database::database#inspect()","gxg::database::persistedarray#inspect()","gxg::database::persistedhash#inspect()","gxg::events::message#inspect()","gxg::io::stringio#inspect()","gxg::networking::imapclient#inspect()","gxg::networking::xmppagentconversation#inspect()","gxg::networking::xmppagentfiletransfer#inspect()","gxg::networking::xmppagentinvitation#inspect()","gxg::returnresponse#inspect()","gxg::storage::volume#inspect()","gxg::tuple#inspect()","gxg::version#inspect()","gxg::events::eventdispatcher#inspect_queue()","gxg::events::eventdispatcher#inspect_timers()","gxg::communications::bridge#interface()","gxg::networking::soapclient#interface()","gxg::networking::soapdriver#interface()","gxg::networking::xmlrpcclient#interface()","gxg::support::library::transcodingio#internal_conversion()","gxg::support::library::transcodingio#internal_conversion=()","gxg::support::library::transcodingio#internal_encoding()","gxg::support::library::transcodingio#internal_encoding=()","gxg::support::library::transcodingio#internal_field_separator()","gxg::support::library::transcodingio#internal_field_separator=()","gxg::support::library::transcodingio#internal_newline()","gxg::support::library::transcodingio#internal_newline=()","gxg::support::library::transcodingio#internal_record_separator()","gxg::support::library::transcodingio#internal_record_separator=()","gxg::units::bytes::interpret()","gxg::io::io::interpret_mode()","gxg::units::interpret_units()","gxg::networking::restclient#intitialize()","gxg::networking::xmppagentinvitation#invitation()","gxg::networking::xmppagent#invitations()","blather::dsl::multiuserchat#invite()","blather::muc::invite#invite_from()","blather::muc::invite#invite_to()","blather::muc::invite#invite_to=()","object#is_any?()","array#iterative()","gxg::database::persistedarray#iterative()","gxg::database::persistedhash#iterative()","hash#iterative()","struct#iterative()","gxg::database::database#iterative_persist()","blather::stanza::presence::mucuser#jid()","gxg::networking::xmppagent#jid()","gxg::networking::xmppagentconversation#jid()","blather::stanza::presence::mucuser#jid=()","gxg::networking::xmppagent#jid_domain()","gxg::networking::xmppagent#jid_node()","gxg::networking::xmppagent#jid_resource()","blather::dsl::multiuserchat#join()","gxg::bytearray#join()","gxg::networking::xmppagent#join()","gxg::networking::xmppagentconversation#join()","gxg::communications::bridgeadapterxmpp#join_channel()","gxg::networking::xmppagent#join_conversation()","string#json?()","string#json_1?()","string#json_2?()","gxg::bytearray#keep_if()","gxg::tuple#key()","gxg::tuple#key=()","gxg::database::persistedhash#keys()","gxg::events::message#keys()","gxg::networking::xmppagentinvitation#keys()","gxg::engine::kill()","gxg::bytearray#last()","io#latency_reading()","stringio#latency_reading()","blather::dsl::multiuserchat#leave()","gxg::networking::xmppagentconversation#leave()","gxg::bytearray#length()","gxg::communications::bridgeadapter::limits()","gxg::communications::bridgeadapterxmpp::limits()","gxg::support::library::socketrw#lineno()","gxg::support::library::socketrw#lineno=()","gxg::support::library::transcodingio#lines()","gxg::networking::imapclient#list()","gxg::networking::imapclient#list_subscriptions()","gxg::networking::zmq::zmqadapter#listen()","gxg::entity::localsystem#load_average()","gxg::networking::ftpclient#login()","gxg::networking::imapclient#login()","gxg::networking::pop3client#login()","gxg::networking::sftpclient#login()","gxg::networking::smtpclient#login()","gxg::networking::soapclient#login()","gxg::networking::sshclient#login()","gxg::networking::xmlrpcclient#login()","gxg::networking::xmppagent#login()","gxg::networking::ftpclient#logout()","gxg::networking::imapclient#logout()","gxg::networking::pop3client#logout()","gxg::networking::sftpclient#logout()","gxg::networking::smtpclient#logout()","gxg::networking::soapclient#logout()","gxg::networking::sshclient#logout()","gxg::networking::xmlrpcclient#logout()","gxg::networking::xmppagent#logout()","stringio#lstat()","gxg::networking::ftpclient#make_directory()","gxg::networking::sftpclient#make_directory()","gxg::networking::sftpclient#make_link()","gxg::eventmanager::manager_running?()","gxg::bytearray#map()","gxg::bytearray#map!()","gxg::bytearray#match()","gxg::engine::maxgroups()","gxg::entity::localsystem#maximum_buffer_size()","gxg::engine::maximum_event_descriptors()","gxg::engine::maximum_file_descriptors()","gxg::bytearray#maxsize()","gxg::bytearray#maxsize=()","blather::dsl::multiuserchat#members()","gxg::entity::localsystem#memory()","gxg::engine::memory_available()","gxg::engine::memory_gear()","gxg::entity::localsystem#memory_limits()","gxg::engine::memory_load()","gxg::engine::memory_load_high?()","gxg::engine::memory_load_low?()","gxg::engine::memory_load_medium?()","gxg::engine::memory_used()","gxg::networking::pop3client#message_count()","gxg::networking::smtpclient#message_template()","object#millisecond_latency()","gxg::bytearray#mime_type()","string#mime_type()","gxg::storage::filespace#mkdir()","gxg::storage::volume#mkdir()","gxg::storage::filespace#mkfile()","gxg::storage::filespace#mkpath()","file::mode_permission_to_gxg()","file::mode_permission_to_unix()","gxg::networking::imapclient#mount()","gxg::storage::filespace#mount()","gxg::networking::imapclient#mount_mode()","gxg::networking::imapclient#mounted?()","gxg::storage::filespace#mounted?()","gxg::storage::filespace#move()","gxg::networking::imapclient#move_to_mailbox()","gxg::communications::bridgeadapter#my_id()","gxg::communications::bridgeadapterxmpp#my_id()","gxg::networking::xmppagentconversation#my_jid()","gxg::networking::xmppagent#my_roster()","gxg::entity::localsystem#network()","gxg::entity::localsystem#network_next_port()","gxg::entity::localsystem#network_port_used?()","gxg::entity::localsystem#network_status()","blather::dsl::multiuserchat::new()","blather::muc::admin::new()","blather::muc::admin::members::new()","blather::muc::invite::new()","blather::muc::join::new()","blather::muc::owner::new()","blather::muc::owner::destroy::new()","blather::stanza::presence::mucuser::status::new()","gxg::bytearray::new()","gxg::communications::bridge::new()","gxg::communications::bridgeadapter::new()","gxg::communications::bridgeadapterxmpp::new()","gxg::database::database::new()","gxg::database::persistedarray::new()","gxg::database::persistedhash::new()","gxg::entity::localsystem::new()","gxg::enumerator::new()","gxg::events::eventdispatcher::new()","gxg::events::message::new()","gxg::io::duplex::new()","gxg::io::file::new()","gxg::io::io::new()","gxg::io::input::new()","gxg::io::output::new()","gxg::io::stringio::new()","gxg::networking::ftpclient::new()","gxg::networking::httpclient::new()","gxg::networking::httpsclient::new()","gxg::networking::httpsclientwithpem::new()","gxg::networking::imapclient::new()","gxg::networking::pop3client::new()","gxg::networking::sftpclient::new()","gxg::networking::smtpclient::new()","gxg::networking::soapclient::new()","gxg::networking::soapdriver::new()","gxg::networking::sshclient::new()","gxg::networking::xmlrpcclient::new()","gxg::networking::xmppagent::new()","gxg::networking::xmppagentconversation::new()","gxg::networking::xmppagentfiletransfer::new()","gxg::networking::xmppagentinvitation::new()","gxg::networking::zmq::zmqclient::new()","gxg::networking::zmq::zmqpair::new()","gxg::networking::zmq::zmqpublisher::new()","gxg::networking::zmq::zmqpuller::new()","gxg::networking::zmq::zmqpusher::new()","gxg::networking::zmq::zmqserver::new()","gxg::networking::zmq::zmqsubscriber::new()","gxg::networking::zmqnode::new()","gxg::returnresponse::new()","gxg::storage::filespace::new()","gxg::storage::volume::new()","gxg::tuple::new()","gxg::version::new()","gxg::returnresponse#new_selector()","gxg::database::database#new_structure_from_format()","gxg::support::library::transcoding#newline_option_used()","gxg::support::library::transcoding#newline_used()","gxg::enumerator#next()","gxg::communications::bridgeadapterxmpp#next_message()","gxg::enumerator#next_values()","gxg::bytearray#nitems()","gxg::communications::bridgeadapter#notify()","gxg::communications::bridgeadapterxmpp#notify()","gxg::networking::xmppagent#notify()","string#numeric_values()","gxg::engine::object_memory_used()","gxg::communications::bridge#on()","gxg::events::message#on()","gxg::networking::soapdriver#on_before_dispatch()","gxg::networking::soapdriver#on_create_document()","gxg::networking::soapdriver#on_response_document()","gxg::networking::xmppagent::online_availability_values()","uri::generic#opaque()","uri::generic#opaque=()","gxg::communications::bridgeadapter#open()","gxg::io::stringio::open()","gxg::storage::filespace#open()","gxg::storage::volume#open()","gxg::communications::bridgeadapter#open?()","gxg::database::database#open?()","gxg::networking::zmq::zmqadapter#open?()","gxg::communications::open_bridge()","gxg::communications::bridgeadapterxmpp#open_channel()","gxg::networking::sftpclient#open_remote_file()","gxg::bytearray#outervalue()","gxg::bytearray#outervalue=()","gxg::bytearray#pack()","gxg::bytearray#padvalue()","gxg::bytearray#padvalue=()","gxg::database::persistedarray#parent()","gxg::database::persistedhash#parent()","gxg::database::persistedhash#parent=()","addrinfo::parse()","uri::parse()","gxg::networking::xmppagent#pass()","gxg::passes_needed()","blather::muc::invite#password()","blather::stanza::presence::mucjoin#password()","uri::generic#password()","blather::muc::invite#password=()","blather::muc::join#password=()","blather::stanza::presence::mucjoin#password=()","uri::generic#password=()","uri::generic#path()","uri::generic#path=()","gxg::storage::filespace#path_prefix()","array#paths_to()","gxg::bytearray#paths_to()","gxg::database::persistedarray#paths_to()","gxg::database::persistedhash#paths_to()","gxg::events::message#paths_to()","hash#paths_to()","gxg::bytearray#pattern_range()","gxg::bytearray#pattern_ranges()","gxg::events::eventdispatcher#pause_event_queue()","gxg::enumerator#peek()","gxg::enumerator#peek_values()","gxg::networking::xmppagentfiletransfer#pending?()","gxg::networking::xmppagentinvitation#pending?()","gxg::networking::xmppagentfiletransfer#percent_completed()","gxg::database::database#permission_policy()","gxg::database::database#permission_policy_load()","gxg::database::database#permission_policy_save()","gxg::bytearray#permutation()","gxg::database::database#persistable?()","gxg::engine::pid()","gxg::io::io::pipe()","gxg::entity::localsystem#platform()","gxg::bytearray#pop()","gxg::database::persistedarray#pop()","gxg::networking::smtpclient#port()","gxg::support::library::socketrw#pos()","gxg::support::library::socketrw#pos=()","gxg::networking::httpclient#post()","gxg::networking::httpsclient#post()","gxg::networking::httpsclientwithpem#post()","gxg::networking::restclient#post()","gxg::events::eventdispatcher#post_event()","gxg::events::eventdispatcher#post_to_event_queue()","gxg::engine::ppid()","gxg::support::library::transcoding#prepare_conversion_options()","gxg::networking::ftpclient#present_directory()","gxg::support::library::transcodingio#print()","gxg::support::library::transcodingio#printf()","array::process()","array#process()","gxg::bytearray::process()","gxg::bytearray#process()","gxg::events::message#process()","hash::process()","hash#process()","struct::process()","struct#process()","array#process!()","gxg::bytearray#process!()","gxg::database::persistedarray#process!()","gxg::database::persistedhash#process!()","gxg::events::message#process!()","hash#process!()","struct#process!()","gxg::support::library::commonioprepare#process_parameters()","gxg::support::library::ioprepare#process_params_classes_error()","gxg::support::library::stringioprepare#process_params_classes_error()","gxg::support::library::ioprepare#process_params_classes_valid()","gxg::support::library::stringioprepare#process_params_classes_valid()","gxg::support::library::ioprepare#process_params_default_object()","gxg::support::library::stringioprepare#process_params_default_object()","gxg::networking::xmppagentconversation#process_received()","gxg::entity::localsystem#processes()","gxg::bytearray#product()","gxg::engine::profile()","gxg::storage::filespace#profile()","gxg::storage::volume#profile()","io#profile()","stringio#profile()","gxg::communications::bridgeadapter::protocol()","gxg::communications::bridgeadapterxmpp::protocol()","gxg::networking::xmppagent#publish_and_subscribe()","blather::roster#push()","gxg::bytearray#push()","gxg::database::persistedarray#push()","gxg::networking::httpclient#put()","gxg::networking::httpsclient#put()","gxg::networking::httpsclientwithpem#put()","gxg::networking::restclient#put()","gxg::support::library::transcodingio#put_codepoint()","gxg::networking::ftpclient#put_file()","gxg::support::library::transcodingio#putc()","gxg::support::library::transcodingio#puts()","gxg::support::library::transcodingio#putwc()","uri::generic#query()","uri::generic#query=()","padrino::helpers::taghelpers#radio_group()","padrino::helpers::taghelpers#radio_tag()","gxg::bytearray#rassoc()","gxg::io::io#read()","gxg::io::stringio#read()","gxg::support::library::socketrw#read()","io#read_latency()","stringio#read_latency()","gxg::io::stringio#read_nonblock()","gxg::support::library::socketrw#read_nonblock()","gxg::support::library::transcodingio#readbyte()","gxg::support::library::transcodingio#readchar()","gxg::support::library::transcodingio#readline()","gxg::support::library::transcodingio#readlines()","gxg::io::io#readpartial()","gxg::io::stringio#readpartial()","gxg::support::library::socketrw#readpartial()","blather::muc::invite#reason()","blather::muc::invite#reason=()","blather::muc::owner::destroy#reason=()","gxg::networking::zmq::zmqadapter#receive()","gxg::reconstitute()","gxg::support::library::transcoding#record_separator_used()","gxg::support::library::socketio#recv()","gxg::support::library::socketiorecvfrom#recvfrom()","gxg::support::library::socketio#recvmsg()","gxg::networking::xmppagentfiletransfer#reference()","gxg::networking::xmppagent#refresh_conversations()","gxg::networking::xmppagent#refresh_file_transfers()","gxg::networking::xmppagent#refresh_invitations()","gxg::database::persistedarray#refresh_links()","gxg::database::persistedhash#refresh_links()","gxg::units::refresh_units_registry()","gxg::networking::register_handler_class()","gxg::networking::xmppagent::register_with_server()","gxg::networking::registered_protocols()","gxg::networking::xmppagent::registration_fields()","gxg::networking::xmppagent::registration_info()","uri::generic#registry()","uri::generic#registry=()","gxg::bytearray#reject()","gxg::bytearray#reject!()","gxg::database::database#release_element_locks()","gxg::engine::release_event_descriptor()","gxg::database::persistedarray#release_reservation()","gxg::database::persistedhash#release_reservation()","gxg::networking::xmppagent#remove_buddy()","gxg::networking::ftpclient#remove_directory()","gxg::networking::sftpclient#remove_directory()","gxg::database::database#remove_element_permissions()","gxg::networking::ftpclient#remove_file()","gxg::networking::imapclient#remove_mailbox()","gxg::networking::imapclient#remove_message_flags()","gxg::networking::imapclient#remove_messages()","gxg::networking::xmppagent::remove_registration()","gxg::networking::sftpclient#remove_remote_file()","gxg::networking::zmqnode#remove_zmq_input()","gxg::networking::zmqnode#remove_zmq_output()","gxg::networking::sftpclient#rename()","gxg::storage::filespace#rename()","gxg::storage::volume#rename()","gxg::networking::ftpclient#rename_file()","gxg::networking::imapclient#rename_mailbox()","gxg::networking::ftpclient#reopen()","gxg::bytearray#repeated_combination()","gxg::bytearray#repeated_permutation()","gxg::bytearray#replace()","gxg::communications::bridge#reply()","gxg::communications::bridge#request()","gxg::networking::zmq::zmqclient#request()","gxg::database::persistedarray#reservation()","gxg::database::persistedhash#reservation()","gxg::database::database#reservation_add_element()","gxg::database::database#reservation_remove_element()","gxg::database::database#reserve_element_locks()","gxg::engine::reserve_event_descriptor()","uri::generic#resolve_host()","gxg::communications::bridge#respond_to_event?()","gxg::returnresponse#result()","gxg::networking::zmqnode#resume_zmq_processing()","gxg::database::database#retrieve_by_address()","gxg::database::database#retrieve_by_uuid()","gxg::networking::pop3client#retrieve_messages()","gxg::bytearray#reverse()","gxg::bytearray#reverse!()","gxg::bytearray#reverse_each()","gxg::database::database#revoke_element_permissions()","gxg::storage::filespace#revoke_permissions()","gxg::storage::volume#revoke_permissions()","gxg::database::database#revoke_permissions_by_uuid()","gxg::enumerator#rewind()","gxg::support::library::socketrw#rewind()","gxg::bytearray#rindex()","gxg::storage::filespace#rmdir()","gxg::storage::volume#rmdir()","gxg::storage::filespace#rmfile()","gxg::storage::volume#rmfile()","blather::stanza::presence::mucuser#role()","blather::stanza::presence::mucuser#role=()","gxg::database::database#role_add_user()","gxg::database::database#role_create()","gxg::database::database#role_destroy()","gxg::database::database#role_exist?()","gxg::database::database#role_fetch()","gxg::database::database#role_group()","gxg::database::database#role_member?()","gxg::database::database#role_members()","gxg::database::database#role_remove_user()","gxg::database::database#role_update()","gxg::bytearray#rotate()","gxg::bytearray#rotate!()","gxg::events::eventdispatcher#running?()","gxg::bytearray#sample()","gxg::database::persistedarray#save()","gxg::database::persistedhash#save()","gxg::database::persistedarray#save_version()","gxg::database::persistedhash#save_version()","blather::dsl::multiuserchat#say()","gxg::networking::xmppagent#say()","gxg::networking::xmppagentconversation#say_something()","uri::generic#scheme()","uri::generic#scheme=()","array::search()","array#search()","gxg::bytearray::search()","gxg::bytearray#search()","gxg::database::persistedarray#search()","gxg::database::persistedhash#search()","gxg::events::message#search()","hash::search()","hash#search()","struct::search()","struct#search()","gxg::database::database#search_database()","gxg::bytearray#select()","gxg::bytearray#select!()","ezmq::publisher#send()","gxg::networking::zmq::zmqadapter#send()","gxg::networking::zmq::zmqpublisher#send()","gxg::support::library::socketio#send()","gxg::networking::ftpclient#send_account_info()","gxg::networking::xmppagent#send_caps()","gxg::networking::ftpclient#send_command()","gxg::networking::sshclient#send_command()","gxg::networking::xmppagent#send_file()","gxg::networking::xmppagentconversation#send_invitations()","gxg::communications::bridgeadapterxmpp#send_message()","gxg::networking::smtpclient#send_message()","gxg::events::message#sender()","gxg::support::library::socketio#sendmsg()","gxg::database::database#serialize()","object#serialize()","string#serialized?()","gxg::entity::localsystem#service_ports()","gxg::entity::localsystem#service_ports_register()","gxg::entity::localsystem#service_ports_register_alias()","gxg::entity::localsystem#service_ports_register_client()","gxg::entity::localsystem#service_ports_register_usage()","gxg::entity::localsystem#service_ports_remove_alias()","gxg::entity::localsystem#service_ports_remove_client()","gxg::entity::localsystem#service_ports_search()","gxg::entity::localsystem#service_ports_usage_preference()","gxg::entity::localsystem#services_file()","gxg::networking::xmppagentfiletransfer#session_id()","array#set_at_path()","gxg::bytearray#set_at_path()","gxg::database::persistedarray#set_at_path()","gxg::database::persistedhash#set_at_path()","gxg::events::message#set_at_path()","hash#set_at_path()","gxg::networking::xmppagent#set_caps()","blather::dsl::multiuserchat#set_configuration()","gxg::database::persistedarray#set_constraint()","blather::dsl::multiuserchat#set_default_configuration()","gxg::database::persistedarray#set_delegate()","gxg::database::persistedhash#set_delegate()","gxg::database::persistedarray#set_element_version()","gxg::database::persistedhash#set_element_version()","gxg::engine::set_engine_data()","gxg::database::persistedhash#set_format()","uri::generic#set_fragment()","uri::generic#set_host()","gxg::communications::bridgeadapterxmpp#set_key()","gxg::networking::imapclient#set_message_attributes()","uri::generic#set_opaque()","gxg::database::persistedarray#set_parent()","gxg::database::persistedhash#set_parent()","uri::generic#set_password()","uri::generic#set_path()","gxg::database::persistedarray#set_permissions()","gxg::database::persistedhash#set_permissions()","gxg::storage::filespace#set_permissions()","gxg::storage::volume#set_permissions()","gxg::storage::volume#set_permissions_recursive()","uri::generic#set_query()","uri::generic#set_registry()","uri::generic#set_scheme()","gxg::networking::xmppagent#set_status()","gxg::networking::restclient::set_system_proxy()","gxg::database::persistedarray#set_title()","gxg::database::persistedhash#set_title()","uri::generic#set_userinfo()","gxg::database::persistedarray#set_version()","gxg::database::persistedhash#set_version()","gxg::engine::setpgid()","gxg::engine::setpgrp()","gxg::engine::setpriority()","gxg::engine::setrlimit()","gxg::engine::setsid()","gxg::database::database#setting_keys()","kernel#shell()","gxg::bytearray#shift()","gxg::bytearray#shuffle()","gxg::bytearray#shuffle!()","gxg::shutdown()","gxg::events::eventdispatcher#shutdown()","gxg::bytearray#size()","gxg::database::persistedarray#size()","gxg::database::persistedhash#size()","gxg::bytearray#slice()","gxg::bytearray#slice!()","string#slice_bytes()","padrino::helpers::taghelpers#slider_tag()","kernel#slots_used()","gxg::networking::zmq::zmqadapter#socket()","gxg::bytearray#sort()","gxg::networking::imapclient#sort()","gxg::bytearray#sort!()","gxg::bytearray#sort_by!()","gxg::engine::spawn()","padrino::helpers::taghelpers#spinner_tab()","string#split_camelcase()","gxg::sql_statement?()","gxg::events::eventdispatcher#startup()","stringio#stat()","gxg::communications::bridgeadapterxmpp#status()","gxg::networking::ftpclient#status()","gxg::networking::imapclient#status()","blather::dsl::multiuserchat#status=()","gxg::communications::bridgeadapterxmpp#status=()","gxg::database::database#structural_link()","gxg::database::database#structure_attached?()","gxg::database::persistedarray#structure_attached?()","gxg::database::persistedhash#structure_attached?()","gxg::database::database#structure_detach()","gxg::database::persistedarray#structure_detach()","gxg::database::persistedhash#structure_detach()","gxg::events::message#subject()","blather::dsl::multiuserchat#subject=()","gxg::storage::filespace#subpath()","gxg::networking::imapclient#subscribe()","gxg::networking::zmq::zmqsubscriber#subscribe()","gxg::events::message#succeed()","hash#symbolize_keys()","gxg::database::database#sync_export()","gxg::database::persistedarray#sync_export()","gxg::database::persistedhash#sync_export()","gxg::database::database#sync_import()","gxg::database::database#synchronize_records()","gxg::io::stringio#sysread()","gxg::support::library::socketrw#sysread()","gxg::networking::ftpclient#system_info()","gxg::io::stringio#syswrite()","gxg::support::library::socketrw#syswrite()","padrino::helpers::taghelpers#tabs_tag()","gxg::bytearray#take()","gxg::bytearray#take_while()","gxg::communications::bridgeadapter::templates()","gxg::communications::bridgeadapterxmpp::templates()","gxg::networking::zmqnode#terminate()","gxg::networking::imapclient#theaded_list()","gxg::events::eventdispatcher#tick()","gxg::engine::times()","gxg::database::persistedarray#title()","gxg::database::persistedhash#title()","gxg::networking::xmppagentconversation#title()","gxg::database::persistedhash#title=()","gxg::bytearray#to_a()","gxg::bytearray#to_ary()","time#to_datetime()","uri::generic#to_hash()","gxg::bytearray#to_json()","gxg::io::file#to_path()","gxg::bytearray#to_s()","gxg::tuple#to_s()","gxg::version#to_s()","uri::generic#to_s()","gxg::database::database#to_uri()","string#to_uri()","string#transcode()","string#transcode!()","string::transcode_options()","gxg::support::library::transcoding#transcode_to_external()","gxg::support::library::transcoding#transcode_to_internal()","gxg::support::library::transcodingio#transcoded_bytes()","gxg::bytearray#transpose()","gxg::bytearray::try_convert()","gxg::database::database#try_persist()","gxg::database::persistedarray#ufs()","gxg::database::persistedhash#ufs()","gxg::engine::uid()","gxg::networking::imapclient#uid_list()","blather::client#unbind()","gxg::support::library::transcodingio#unget_transcoded_byte()","gxg::support::library::transcodingio#unget_transcoded_bytes()","gxg::support::library::socketrw#ungetbyte()","gxg::support::library::transcodingio#ungetbyte()","gxg::support::library::socketrw#ungetbytes()","gxg::support::library::transcodingio#ungetbytes()","gxg::support::library::socketrw#ungetc()","gxg::support::library::transcodingio#ungetc()","gxg::support::library::socketrw#ungets()","gxg::support::library::transcodingio#ungets()","gxg::bytearray#uniq()","gxg::bytearray#uniq!()","gxg::units::unit_interpreters()","file::unix_permissions_to_gxg()","gxg::database::persistedarray#unload()","gxg::database::persistedhash#unload()","blather::dsl::multiuserchat#unlock()","gxg::networking::imapclient#unmount()","gxg::storage::filespace#unmount()","string#unpack_bytes()","gxg::events::eventdispatcher#unpause_event_queue()","gxg::database::persistedarray#unpersist()","gxg::database::persistedhash#unpersist()","gxg::networking::unregister_handler_class()","string#unserialize()","gxg::bytearray#unshift()","gxg::networking::imapclient#unsubscribe()","gxg::networking::zmq::zmqsubscriber#unsubscribe()","gxg::database::database#update_vfs_permission()","gxg::networking::sftpclient#upload()","gxg::networking::sshclient#upload()","gxg::networking::xmppagentfiletransfer#upload_file()","gxg::networking::imapclient#upload_message()","addrinfo#uri_info()","uri::generic#user()","uri::generic#user=()","gxg::database::database#user_create()","gxg::database::database#user_credential()","gxg::database::database#user_destroy()","gxg::database::database#user_exist?()","gxg::database::database#user_fetch()","gxg::database::database#user_id_available?()","gxg::database::database#user_manifest()","gxg::database::database#user_roles()","gxg::database::database#user_set_password()","gxg::database::database#user_update()","uri::generic#userinfo()","gxg::communications::bridge#uuid()","gxg::communications::bridgeadapter#uuid()","gxg::database::persistedarray#uuid()","gxg::database::persistedhash#uuid()","gxg::networking::xmppagentconversation#uuid()","gxg::networking::xmppagentinvitation#uuid()","gxg::database::persistedhash#uuid=()","gxg::uuid_generate()","gxg::database::database#uuid_list()","string#valid_date?()","string#valid_datetime?()","string#valid_datetime_nolocale?()","gxg::valid_domain_name?()","gxg::database::database::valid_field_classes()","string#valid_jid?()","gxg::io::io::valid_mode_set()","gxg::entity::localsystem#valid_modes()","gxg::io::io::valid_modes()","gxg::storage::filespace#valid_path?()","string#valid_path?()","string#valid_time?()","string#valid_uri?()","gxg::valid_uuid?()","gxg::tuple#value()","gxg::version#value()","gxg::tuple#value=()","gxg::bytearray#values_at()","gxg::database::persistedarray#version()","gxg::database::persistedhash#version()","gxg::database::persistedarray#version=()","gxg::database::persistedhash#version=()","gxg::networking::zmq::zmqadapter#vetted_parameters()","gxg::database::database#vfs_permission()","gxg::database::database#vfs_permission_exist?()","gxg::database::database#vfs_permission_manifest()","gxg::storage::filespace#volume_of_path()","gxg::engine::wait()","gxg::engine::wait2()","gxg::database::persistedarray#wait_for_reservation()","gxg::database::persistedhash#wait_for_reservation()","gxg::engine::waitall()","gxg::engine::waitpid()","gxg::engine::waitpid2()","gxg::returnresponse#warning()","gxg::networking::wget()","gxg::networking::xmppagent#when_ready()","gxg::enumerator#with_index()","gxg::enumerator#with_object()","blather::dsl::multiuserchat#write()","gxg::io::io#write()","gxg::io::stringio#write()","gxg::networking::xmppagent#write()","gxg::support::library::socketrw#write()","io#write_latency()","stringio#write_latency()","gxg::io::stringio#write_nonblock()","gxg::support::library::socketrw#write_nonblock()","gxg::database::persistedarray#write_permission?()","gxg::database::persistedhash#write_permission?()","gxg::database::persistedarray#write_reserved?()","gxg::database::persistedhash#write_reserved?()","gxg::networking::xmppagent#write_to_stream()","blather::dsl::multiuserchat#write_with_handler()","gxg::networking::imapclient#xlist()","string#xml?()","gxg::networking::xmppagent#xmpp_message_to_gxg()","gxg::bytearray#zip()","gxg::networking::zmq::zmq_default_context()","gxg::networking::zmqnode#zmq_error_handler()","gxg::networking::zmqnode#zmq_handler()","gxg::networking::zmqnode#zmq_inputs()","gxg::networking::zmqnode#zmq_outputs()","gxg::networking::zmqnode#zmq_process()","gxg::networking::zmqnode#zmq_processing?()","gxg::networking::zmq::zmq_supported_protocols()","gxg::bytearray#|()","",""],"info":[["Addrinfo","","Addrinfo.html","",""],["Array","","Array.html","",""],["Blather","","Blather.html","","<p>### MUC extentions for Blather: See: github.com/maccman/blather and github.com/adhearsion/blather/issues/81 …\n"],["Blather::Client","","Blather/Client.html","",""],["Blather::DSL","","Blather/DSL.html","",""],["Blather::DSL::MultiUserChat","","Blather/DSL/MultiUserChat.html","",""],["Blather::MUC","","Blather/MUC.html","","<p>Support for MUC Presense\n"],["Blather::MUC::Admin","","Blather/MUC/Admin.html","",""],["Blather::MUC::Admin::Members","","Blather/MUC/Admin/Members.html","","<p>&lt;iq from=&#39;crone1@shakespeare.lit/desktop&#39;\n\n<pre>  id=&#39;member3&#39;\n  to=&#39;darkcave@chat.shakespeare.lit&#39; ...</pre>\n"],["Blather::MUC::Invite","","Blather/MUC/Invite.html","","<p>&lt;x xmlns=&#39;jabber.org/protocol/muc#user&#39;&gt;\n\n<pre>&lt;invite to=&#39;jid&#39;&gt;\n  &lt;reason&gt;comment&lt;/reason&gt;\n&lt;/invite&gt;</pre>\n"],["Blather::MUC::Join","","Blather/MUC/Join.html","",""],["Blather::MUC::Owner","","Blather/MUC/Owner.html","",""],["Blather::MUC::Owner::Configure","","Blather/MUC/Owner/Configure.html","",""],["Blather::MUC::Owner::Destroy","","Blather/MUC/Owner/Destroy.html","","<p>&lt;iq from=&#39;crone1@shakespeare.lit/desktop&#39;\n\n<pre>  id=&#39;begone&#39;\n  to=&#39;heath@chat.shakespeare.lit&#39;\n ...</pre>\n"],["Blather::Roster","","Blather/Roster.html","",""],["Blather::Stanza","","Blather/Stanza.html","",""],["Blather::Stanza::Presence","","Blather/Stanza/Presence.html","",""],["Blather::Stanza::Presence::MUCJoin","","Blather/Stanza/Presence/MUCJoin.html","",""],["Blather::Stanza::Presence::MUCUser","","Blather/Stanza/Presence/MUCUser.html","",""],["Blather::Stanza::Presence::MUCUser::Status","","Blather/Stanza/Presence/MUCUser/Status.html","",""],["Class","","Class.html","","<p>Additional alternations to Standard element classes: expanded functionality (Tier 1 Augmentation)\n<p>Class …\n"],["EZMQ","","EZMQ.html","","<p>Patches to EZMQ:\n"],["EZMQ::Publisher","","EZMQ/Publisher.html","",""],["Fcntl","","Fcntl.html","",""],["File","","File.html","",""],["Float","","Float.html","","<p>class FalseClass\n\n<pre>public\ndef initialize_clone\n  false\nend\nalias :initialize_dup :initialize_clone\nalias ...</pre>\n"],["GxG","","GxG.html","","\n<pre>---------------------------------------------------------------------------------------------------------------------</pre>\n"],["GxG::ByteArray","","GxG/ByteArray.html","",""],["GxG::Communications","","GxG/Communications.html","",""],["GxG::Communications::Bridge","","GxG/Communications/Bridge.html","",""],["GxG::Communications::BridgeAdapter","","GxG/Communications/BridgeAdapter.html","","<p>Adapters\n"],["GxG::Communications::BridgeAdapterXMPP","","GxG/Communications/BridgeAdapterXMPP.html","","<p>XMPP\n"],["GxG::Database","","GxG/Database.html","",""],["GxG::Database::Database","","GxG/Database/Database.html","","<p>Database class proper\n"],["GxG::Database::ExternalAuthority","","GxG/Database/ExternalAuthority.html","","<p>External Authority (Such as LDAP)\n"],["GxG::Database::LDAPAuthority","","GxG/Database/LDAPAuthority.html","",""],["GxG::Database::PersistedArray","","GxG/Database/PersistedArray.html","","<p>Class Place-holder Definitions\n"],["GxG::Database::PersistedHash","","GxG/Database/PersistedHash.html","",""],["GxG::Engine","","GxG/Engine.html","",""],["GxG::Entity","","GxG/Entity.html","",""],["GxG::Entity::LocalSystem","","GxG/Entity/LocalSystem.html","","<p>SysInfo provide default filesystem object\n"],["GxG::Entity::RemoteSystem","","GxG/Entity/RemoteSystem.html","",""],["GxG::Enumerator","","GxG/Enumerator.html","",""],["GxG::EventManager","","GxG/EventManager.html","",""],["GxG::Events","","GxG/Events.html","",""],["GxG::Events::EventDispatcher","","GxG/Events/EventDispatcher.html","","<p>Provide a Cooperative Processing facility for sessions\n"],["GxG::Events::LoggerDB","","GxG/Events/LoggerDB.html","",""],["GxG::Events::Message","","GxG/Events/Message.html","",""],["GxG::IO","","GxG/IO.html","",""],["GxG::IO::Duplex","","GxG/IO/Duplex.html","",""],["GxG::IO::File","","GxG/IO/File.html","",""],["GxG::IO::IO","","GxG/IO/IO.html","","\n<pre>local input / output objects: Stream, Pipe, File, Device\nreplacement File/Pipe/Socket IO object and methods ...</pre>\n"],["GxG::IO::Input","","GxG/IO/Input.html","",""],["GxG::IO::Output","","GxG/IO/Output.html","",""],["GxG::IO::StringIO","","GxG/IO/StringIO.html","",""],["GxG::Networking","","GxG/Networking.html","",""],["GxG::Networking::FtpClient","","GxG/Networking/FtpClient.html","",""],["GxG::Networking::HttpClient","","GxG/Networking/HttpClient.html","",""],["GxG::Networking::HttpsClient","","GxG/Networking/HttpsClient.html","",""],["GxG::Networking::HttpsClientWithPem","","GxG/Networking/HttpsClientWithPem.html","",""],["GxG::Networking::ImapClient","","GxG/Networking/ImapClient.html","","<p>To Generate OAuth2 Tokens, See: github.com/google/gmail-oauth2-tools IMAP Classes:\n"],["GxG::Networking::Pop3Client","","GxG/Networking/Pop3Client.html","","<p>POP3 Classes:\n"],["GxG::Networking::RestClient","","GxG/Networking/RestClient.html","","<p>REST Classes:\n"],["GxG::Networking::SftpClient","","GxG/Networking/SftpClient.html","",""],["GxG::Networking::SmtpClient","","GxG/Networking/SmtpClient.html","","<p>SMTP Classes:\n"],["GxG::Networking::SoapClient","","GxG/Networking/SoapClient.html","",""],["GxG::Networking::SoapDriver","","GxG/Networking/SoapDriver.html","","<p>SOAP Classes:\n"],["GxG::Networking::SshClient","","GxG/Networking/SshClient.html","","<p>SSH Client\n"],["GxG::Networking::XmlrpcClient","","GxG/Networking/XmlrpcClient.html","","<p>XMLRPC Classes:\n"],["GxG::Networking::XmppAgent","","GxG/Networking/XmppAgent.html","","<p>XMPP Client\n"],["GxG::Networking::XmppAgentConversation","","GxG/Networking/XmppAgentConversation.html","","<p>Conversation Channel\n"],["GxG::Networking::XmppAgentFileTransfer","","GxG/Networking/XmppAgentFileTransfer.html","","<p>File Transfer\n"],["GxG::Networking::XmppAgentInvitation","","GxG/Networking/XmppAgentInvitation.html","","<p>XMPP Classes: Review : Blather switchover: require ::File.expand_path(“./xmpp_client.rb”,::File.dirname(__FILE__)) …\n"],["GxG::Networking::ZMQ","","GxG/Networking/ZMQ.html","",""],["GxG::Networking::ZMQ::ZmqAdapter","","GxG/Networking/ZMQ/ZmqAdapter.html","",""],["GxG::Networking::ZMQ::ZmqClient","","GxG/Networking/ZMQ/ZmqClient.html","",""],["GxG::Networking::ZMQ::ZmqContext","","GxG/Networking/ZMQ/ZmqContext.html","",""],["GxG::Networking::ZMQ::ZmqPair","","GxG/Networking/ZMQ/ZmqPair.html","",""],["GxG::Networking::ZMQ::ZmqPublisher","","GxG/Networking/ZMQ/ZmqPublisher.html","",""],["GxG::Networking::ZMQ::ZmqPuller","","GxG/Networking/ZMQ/ZmqPuller.html","",""],["GxG::Networking::ZMQ::ZmqPusher","","GxG/Networking/ZMQ/ZmqPusher.html","",""],["GxG::Networking::ZMQ::ZmqServer","","GxG/Networking/ZMQ/ZmqServer.html","",""],["GxG::Networking::ZMQ::ZmqSubscriber","","GxG/Networking/ZMQ/ZmqSubscriber.html","",""],["GxG::Networking::ZmqNode","","GxG/Networking/ZmqNode.html","","<p>xxx\n\n<pre>class AbstractZMQSocket\n  # Abstract class, never instantiated\n  def self.supported_protocols()\n  ...</pre>\n"],["GxG::ReturnResponse","","GxG/ReturnResponse.html","",""],["GxG::Storage","","GxG/Storage.html","",""],["GxG::Storage::FileSpace","","GxG/Storage/FileSpace.html","",""],["GxG::Storage::Volume","","GxG/Storage/Volume.html","",""],["GxG::Support","","GxG/Support.html","",""],["GxG::Support::Library","","GxG/Support/Library.html","",""],["GxG::Support::Library::CommonIOPrepare","","GxG/Support/Library/CommonIOPrepare.html","",""],["GxG::Support::Library::IOPrepare","","GxG/Support/Library/IOPrepare.html","",""],["GxG::Support::Library::SocketIO","","GxG/Support/Library/SocketIO.html","",""],["GxG::Support::Library::SocketIORecvFrom","","GxG/Support/Library/SocketIORecvFrom.html","",""],["GxG::Support::Library::SocketRW","","GxG/Support/Library/SocketRW.html","",""],["GxG::Support::Library::StringIOPrepare","","GxG/Support/Library/StringIOPrepare.html","",""],["GxG::Support::Library::Transcoding","","GxG/Support/Library/Transcoding.html","",""],["GxG::Support::Library::TranscodingIO","","GxG/Support/Library/TranscodingIO.html","",""],["GxG::Tuple","","GxG/Tuple.html","",""],["GxG::Units","","GxG/Units.html","",""],["GxG::Units::Bits","","GxG/Units/Bits.html","",""],["GxG::Units::Bytes","","GxG/Units/Bytes.html","",""],["GxG::Version","","GxG/Version.html","",""],["Hash","","Hash.html","","<p>Alteration to Hash and Array for support of structural processing: additional methods to address elements …\n"],["IO","","IO.html","","\n<pre>IO/StringIO/File alterations\nFill in missing constants according to platform.\n### win32 stuff</pre>\n<p>006 #define …\n"],["Integer","","Integer.html","","<p>Alteration to &lt;Integer&gt;.times block call loop\n"],["Kernel","","Kernel.html","","<p>shell command:\n<p>Additional alternations to Kernel/Object class: Data element class support, quota support …\n"],["NilClass","","NilClass.html","","<p>require facet classes here (prior to overrides), and ensure smooth integration with overrides.\n<p>### dup …\n"],["Object","","Object.html","","<p>Preliminary alternations to Kernel/Object class: Actor/Event support\n<p>Alterations to Object class: GxG::Engine …\n"],["Padrino","","Padrino.html","",""],["Padrino::Helpers","","Padrino/Helpers.html","",""],["Padrino::Helpers::TagHelpers","","Padrino/Helpers/TagHelpers.html","",""],["String","","String.html","","<p>Alteration to &lt;string&gt; class\n"],["StringIO","","StringIO.html","",""],["Struct","","Struct.html","","<p>Alteration to Struct for support of structural processing:\n"],["Symbol","","Symbol.html","",""],["Time","","Time.html","",""],["URI","","URI.html","","<p>URI alterations\n"],["URI::Generic","","URI/Generic.html","",""],["&","GxG::ByteArray","GxG/ByteArray.html#method-i-26","(*args)",""],["*","GxG::ByteArray","GxG/ByteArray.html#method-i-2A","(*args)",""],["+","GxG::ByteArray","GxG/ByteArray.html#method-i-2B","(*args)",""],["-","GxG::ByteArray","GxG/ByteArray.html#method-i-2D","(*args)",""],["<<","GxG::ByteArray","GxG/ByteArray.html#method-i-3C-3C","(*args)",""],["<<","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-3C-3C","(*args)",""],["<<","GxG::IO::IO","GxG/IO/IO.html#method-i-3C-3C","(*args)",""],["<<","GxG::IO::StringIO","GxG/IO/StringIO.html#method-i-3C-3C","(*args)",""],["<<","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-3C-3C","(stanza)",""],["<<","GxG::Support::Library::SocketRW","GxG/Support/Library/SocketRW.html#method-i-3C-3C","(*args)",""],["<=>","GxG::ByteArray","GxG/ByteArray.html#method-i-3C-3D-3E","(*args)",""],["<=>","GxG::Tuple","GxG/Tuple.html#method-i-3C-3D-3E","(other_value=nil)",""],["<=>","GxG::Version","GxG/Version.html#method-i-3C-3D-3E","(other)",""],["==","GxG::ByteArray","GxG/ByteArray.html#method-i-3D-3D","(*args)",""],["[]","GxG::ByteArray","GxG/ByteArray.html#method-c-5B-5D","(*args)",""],["[]","GxG::ByteArray","GxG/ByteArray.html#method-i-5B-5D","(indexer=0, length=nil)",""],["[]","GxG::Database::Database","GxG/Database/Database.html#method-i-5B-5D","(setting_key=nil)",""],["[]","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-5B-5D","(indexer=nil)",""],["[]","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-5B-5D","(key=nil)",""],["[]","GxG::Engine","GxG/Engine.html#method-c-5B-5D","(the_path=\"\")",""],["[]","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-i-5B-5D","(the_path=\"\")",""],["[]","GxG::Events::Message","GxG/Events/Message.html#method-i-5B-5D","(the_key)",""],["[]","GxG::Networking::XmppAgentConversation","GxG/Networking/XmppAgentConversation.html#method-i-5B-5D","(the_key=nil)",""],["[]","GxG::Networking::XmppAgentInvitation","GxG/Networking/XmppAgentInvitation.html#method-i-5B-5D","(the_key)",""],["[]=","GxG::ByteArray","GxG/ByteArray.html#method-i-5B-5D-3D","(indexer=0, length=nil, value=nil)",""],["[]=","GxG::Database::Database","GxG/Database/Database.html#method-i-5B-5D-3D","(setting_key=nil, object=nil)",""],["[]=","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-5B-5D-3D","(indexer=nil, value=nil)",""],["[]=","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-5B-5D-3D","(key=nil, value=nil)",""],["[]=","GxG::Events::Message","GxG/Events/Message.html#method-i-5B-5D-3D","(the_key, the_value)",""],["abilities","GxG::Communications::BridgeAdapter","GxG/Communications/BridgeAdapter.html#method-c-abilities","()",""],["abilities","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-c-abilities","()",""],["abort","GxG::Engine","GxG/Engine.html#method-c-abort","(*args)",""],["accept","GxG::Networking::XmppAgentFileTransfer","GxG/Networking/XmppAgentFileTransfer.html#method-i-accept","()",""],["accept","GxG::Networking::XmppAgentInvitation","GxG/Networking/XmppAgentInvitation.html#method-i-accept","()",""],["accept_file_transfer","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-i-accept_file_transfer","(the_transfer_uuid=nil)",""],["accept_invitation","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-i-accept_invitation","(the_invitation_uuid=nil)","<p>Invitations\n"],["accordian_tag","Padrino::Helpers::TagHelpers","Padrino/Helpers/TagHelpers.html#method-i-accordian_tag","(the_id=nil, sections=nil)","<p>See: github.com/padrino/padrino-framework/blob/master/padrino-helpers/lib/padrino-helpers/tag_helpers.rb …\n"],["actor?","Object","Object.html#method-i-actor-3F","()",""],["add","Blather::Roster","Blather/Roster.html#method-i-add","(elem, send = true, groups = [\"Buddies\"])",""],["add_buddy","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-add_buddy","(the_jid=nil)",""],["add_message","GxG::Networking::XmppAgentConversation","GxG/Networking/XmppAgentConversation.html#method-i-add_message","(the_message=nil)",""],["add_message_flags","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-add_message_flags","(uid=nil, flags=nil)",""],["add_zmq_input","GxG::Networking::ZmqNode","GxG/Networking/ZmqNode.html#method-i-add_zmq_input","(the_key=nil, the_socket=nil)",""],["add_zmq_output","GxG::Networking::ZmqNode","GxG/Networking/ZmqNode.html#method-i-add_zmq_output","(the_key=nil, the_socket=nil)",""],["address_info","URI::Generic","URI/Generic.html#method-i-address_info","()",""],["adjust_event_queue","GxG::Events::EventDispatcher","GxG/Events/EventDispatcher.html#method-i-adjust_event_queue","(queue=:root,settings={})",""],["affiliation","Blather::Stanza::Presence::MUCUser","Blather/Stanza/Presence/MUCUser.html#method-i-affiliation","()",""],["affiliation=","Blather::Stanza::Presence::MUCUser","Blather/Stanza/Presence/MUCUser.html#method-i-affiliation-3D","(val)",""],["after","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-after","(handler = nil, *guards, &block)","<p>### Setup an after filter\n<p>@param [Symbol] handler (optional) the stanza handler the filter should run …\n"],["alive?","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-alive-3F","()",""],["alive?","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-alive-3F","()",""],["alive?","Object","Object.html#method-i-alive-3F","()",""],["all_messages","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-i-all_messages","(the_channel_uuid=nil)",""],["apportioned_ranges","GxG","GxG.html#method-c-apportioned_ranges","(how_much_data=0, container_limit=0, original_offset=0)",""],["architecture","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-i-architecture","()",""],["assign_element_permission","GxG::Database::Database","GxG/Database/Database.html#method-i-assign_element_permission","(table=:unspecified, dbid=0, credential=nil, permissions={})",""],["assoc","GxG::ByteArray","GxG/ByteArray.html#method-i-assoc","(key=nil)","<p>Method Aliases\n"],["associate","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-i-associate","(recipient=nil)",""],["async_download","GxG::Networking::SftpClient","GxG/Networking/SftpClient.html#method-i-async_download","(the_remote_source=nil, the_destination=nil, options={}, &progress_block)",""],["async_download","GxG::Networking::SshClient","GxG/Networking/SshClient.html#method-i-async_download","(the_remote_source=nil, the_destination=nil, options={}, &progress_block)",""],["async_upload","GxG::Networking::SftpClient","GxG/Networking/SftpClient.html#method-i-async_upload","(the_local_source=nil, the_destination=nil, options={}, &progress_block)",""],["async_upload","GxG::Networking::SshClient","GxG/Networking/SshClient.html#method-i-async_upload","(the_local_source=nil, the_destination=nil, options={}, &progress_block)",""],["at","GxG::ByteArray","GxG/ByteArray.html#method-i-at","(*args)",""],["at","GxG::Events::EventDispatcher","GxG/Events/EventDispatcher.html#method-i-at","(expression=\"\",&block)",""],["attachment_template","GxG::Networking::SmtpClient","GxG/Networking/SmtpClient.html#method-i-attachment_template","(the_path=\"\", content_parameters={\"name\" => \"\"})",""],["autocomplete_tag","Padrino::Helpers::TagHelpers","Padrino/Helpers/TagHelpers.html#method-i-autocomplete_tag","(the_id=nil, the_terms=nil)",""],["available_event_descriptors","GxG::Engine","GxG/Engine.html#method-c-available_event_descriptors","()",""],["available_file_descriptors","GxG::Engine","GxG/Engine.html#method-c-available_file_descriptors","()",""],["average","Array","Array.html#method-i-average","()",""],["base64?","String","String.html#method-i-base64-3F","()","<p>Base64 Stuff:\n"],["before","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-before","(handler = nil, *guards, &block)","<p>### Setup a before filter\n<p>@param [Symbol] handler (optional) the stanza handler the filter should run …\n"],["binmode","GxG::IO::StringIO","GxG/IO/StringIO.html#method-i-binmode","()",""],["binmode","StringIO","StringIO.html#method-i-binmode","()",""],["binmode?","GxG::IO::StringIO","GxG/IO/StringIO.html#method-i-binmode-3F","()",""],["binmode?","StringIO","StringIO.html#method-i-binmode-3F","()",""],["body","GxG::Events::Message","GxG/Events/Message.html#method-i-body","()",""],["bridge","GxG::Communications","GxG/Communications.html#method-c-bridge","(the_uuid)",""],["buddies","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-buddies","()",""],["buffer_size","GxG::Networking::XmppAgentFileTransfer","GxG/Networking/XmppAgentFileTransfer.html#method-i-buffer_size","()",""],["buffer_size=","GxG::Networking::XmppAgentFileTransfer","GxG/Networking/XmppAgentFileTransfer.html#method-i-buffer_size-3D","(the_size=4096)",""],["byte_at","String","String.html#method-i-byte_at","(*args)",""],["byte_size_by_uuid","GxG::Database::Database","GxG/Database/Database.html#method-i-byte_size_by_uuid","(the_uuid=nil)",""],["bytes","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-bytes","(&block)",""],["bytes_at","String","String.html#method-i-bytes_at","(*args)",""],["call_event","GxG::Communications::Bridge","GxG/Communications/Bridge.html#method-i-call_event","(operation_envelope=nil)",""],["callmethod","GxG::Networking::SoapClient","GxG/Networking/SoapClient.html#method-i-callmethod","(*args)",""],["callmethod","GxG::Networking::XmlrpcClient","GxG/Networking/XmlrpcClient.html#method-i-callmethod","(the_method = nil, arguments = nil)",""],["camel_case?","String","String.html#method-i-camel_case-3F","()",""],["cancel","GxG::Networking::XmppAgentFileTransfer","GxG/Networking/XmppAgentFileTransfer.html#method-i-cancel","()",""],["cancel_file_transfer","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-i-cancel_file_transfer","(the_transfer_uuid=nil)",""],["cancel_timer","GxG::Events::EventDispatcher","GxG/Events/EventDispatcher.html#method-i-cancel_timer","(timer_reference=nil)","<p>Adding Timers See: stackoverflow.com/questions/235504/validating-crontab-entries-with-php Cron REGEX: …\n"],["cancelled?","GxG::Networking::XmppAgentFileTransfer","GxG/Networking/XmppAgentFileTransfer.html#method-i-cancelled-3F","()",""],["capability","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-capability","()",""],["categories","GxG::Units::Bytes","GxG/Units/Bytes.html#method-c-categories","()",""],["change_configuration","GxG::Networking::XmppAgentConversation","GxG/Networking/XmppAgentConversation.html#method-i-change_configuration","(the_configuration=nil)",""],["change_directory","GxG::Networking::FtpClient","GxG/Networking/FtpClient.html#method-i-change_directory","(dir_name=nil)",""],["change_ownership","GxG::Networking::SftpClient","GxG/Networking/SftpClient.html#method-i-change_ownership","(the_path=nil, new_owners=nil, &block)",""],["change_permissions","GxG::Networking::SftpClient","GxG/Networking/SftpClient.html#method-i-change_permissions","(the_path=nil, new_permissions=nil, &block)",""],["channel_operations","GxG::Networking::SshClient","GxG/Networking/SshClient.html#method-i-channel_operations","(&block)",""],["channels","GxG::Communications::BridgeAdapter","GxG/Communications/BridgeAdapter.html#method-i-channels","()","<p>Basic Channel Support\n"],["channels","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-i-channels","()","<p>Basic Channel Support\n"],["chars","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-chars","(&block)",""],["chat_buddies","GxG::Networking::XmppAgentConversation","GxG/Networking/XmppAgentConversation.html#method-i-chat_buddies","()",""],["clear","GxG::ByteArray","GxG/ByteArray.html#method-i-clear","()",""],["clear_all_element_locks","GxG::Database::Database","GxG/Database/Database.html#method-i-clear_all_element_locks","()","<p>Utility methods\n"],["clear_cache","GxG::Networking::HttpClient","GxG/Networking/HttpClient.html#method-i-clear_cache","()",""],["clear_cache","GxG::Networking::HttpsClient","GxG/Networking/HttpsClient.html#method-i-clear_cache","()",""],["clear_cache","GxG::Networking::HttpsClientWithPem","GxG/Networking/HttpsClientWithPem.html#method-i-clear_cache","()",""],["clear_cache","GxG::Networking::RestClient","GxG/Networking/RestClient.html#method-i-clear_cache","()",""],["clear_constraint","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-clear_constraint","()",""],["clear_system_proxy","GxG::Networking::RestClient","GxG/Networking/RestClient.html#method-c-clear_system_proxy","()",""],["client","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-client","()","<p>Review : debug only method\n"],["clone","Float","Float.html#method-i-clone","()",""],["clone","GxG::ByteArray","GxG/ByteArray.html#method-i-clone","()",""],["clone","GxG::Database::Database","GxG/Database/Database.html#method-i-clone","()",""],["clone","NilClass","NilClass.html#method-i-clone","()",""],["clone","Struct","Struct.html#method-i-clone","()",""],["clone","Symbol","Symbol.html#method-i-clone","()",""],["close","GxG::Communications::BridgeAdapter","GxG/Communications/BridgeAdapter.html#method-i-close","()",""],["close","GxG::Database::Database","GxG/Database/Database.html#method-i-close","()",""],["close","GxG::IO::StringIO","GxG/IO/StringIO.html#method-i-close","()",""],["close","GxG::Networking::ZMQ::ZmqAdapter","GxG/Networking/ZMQ/ZmqAdapter.html#method-i-close","()",""],["close_bridge","GxG::Communications","GxG/Communications.html#method-c-close_bridge","(the_uuid=nil)",""],["close_channel","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-i-close_channel","(the_channel_uuid=nil)",""],["close_read","GxG::IO::StringIO","GxG/IO/StringIO.html#method-i-close_read","()",""],["close_write","GxG::IO::StringIO","GxG/IO/StringIO.html#method-i-close_write","()",""],["closed?","GxG::Networking::FtpClient","GxG/Networking/FtpClient.html#method-i-closed-3F","()",""],["closed?","GxG::Networking::SftpClient","GxG/Networking/SftpClient.html#method-i-closed-3F","()",""],["closed?","GxG::Networking::SoapClient","GxG/Networking/SoapClient.html#method-i-closed-3F","()",""],["closed?","GxG::Networking::SshClient","GxG/Networking/SshClient.html#method-i-closed-3F","()",""],["closed?","GxG::Networking::XmlrpcClient","GxG/Networking/XmlrpcClient.html#method-i-closed-3F","()",""],["closed?","GxG::Networking::XmppAgentConversation","GxG/Networking/XmppAgentConversation.html#method-i-closed-3F","()",""],["code","Blather::Stanza::Presence::MUCUser::Status","Blather/Stanza/Presence/MUCUser/Status.html#method-i-code","()",""],["code=","Blather::Stanza::Presence::MUCUser::Status","Blather/Stanza/Presence/MUCUser/Status.html#method-i-code-3D","(var)",""],["codepoints","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-codepoints","(&block)",""],["collect","GxG::ByteArray","GxG/ByteArray.html#method-i-collect","(&block)",""],["collect!","GxG::ByteArray","GxG/ByteArray.html#method-i-collect-21","(&block)",""],["combination","GxG::ByteArray","GxG/ByteArray.html#method-i-combination","(*args,&block)",""],["compact","GxG::ByteArray","GxG/ByteArray.html#method-i-compact","()",""],["compact!","GxG::ByteArray","GxG/ByteArray.html#method-i-compact-21","()",""],["compose_reply","GxG::Events::Message","GxG/Events/Message.html#method-i-compose_reply","(&block)",""],["concat","GxG::ByteArray","GxG/ByteArray.html#method-i-concat","(*args)",""],["configuration","Blather::DSL::MultiUserChat","Blather/DSL/MultiUserChat.html#method-i-configuration","(&block)",""],["configuration","GxG::Networking::XmppAgentConversation","GxG/Networking/XmppAgentConversation.html#method-i-configuration","()",""],["configuration=","Blather::DSL::MultiUserChat","Blather/DSL/MultiUserChat.html#method-i-configuration-3D","(values, &block)",""],["connect","GxG::Database","GxG/Database.html#method-c-connect","(the_url, options={})",""],["connector","GxG::Database::Database","GxG/Database/Database.html#method-i-connector","()",""],["connector","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-connector","()","<p>???\n"],["constraint","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-constraint","()",""],["content_size_used","Kernel","Kernel.html#method-i-content_size_used","(counted=[], options={})",""],["context","GxG::Networking::ZMQ::ZmqAdapter","GxG/Networking/ZMQ/ZmqAdapter.html#method-i-context","()",""],["control_group","Padrino::Helpers::TagHelpers","Padrino/Helpers/TagHelpers.html#method-i-control_group","(content=\"\", options={:vertical => false}, &block)",""],["conversations","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-conversations","(select_jid=nil)",""],["convert_to_string","GxG::Support::Library::Transcoding","GxG/Support/Library/Transcoding.html#method-i-convert_to_string","(the_object=nil,encoding=::Encoding.default_external,conversion_options={})",""],["cookies","GxG::Networking::HttpClient","GxG/Networking/HttpClient.html#method-i-cookies","()",""],["cookies","GxG::Networking::HttpsClient","GxG/Networking/HttpsClient.html#method-i-cookies","()",""],["cookies","GxG::Networking::HttpsClientWithPem","GxG/Networking/HttpsClientWithPem.html#method-i-cookies","()",""],["copy","GxG::Storage::FileSpace","GxG/Storage/FileSpace.html#method-i-copy","(source_path=nil,destination_path=nil, options={})","<p>Copying support:\n"],["copy_to_mailbox","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-copy_to_mailbox","(uid=nil, mailbox=nil)",""],["count","GxG::ByteArray","GxG/ByteArray.html#method-i-count","(match_value=nil,&block)",""],["cpuload","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-i-cpuload","()",""],["create_conversation","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-create_conversation","(the_jid=nil, password=nil, configuration={})",""],["create_data","Blather::MUC::Owner::Configure","Blather/MUC/Owner/Configure.html#method-i-create_data","()",""],["create_destroy","Blather::MUC::Owner::Destroy","Blather/MUC/Owner/Destroy.html#method-i-create_destroy","()",""],["create_event_queue","GxG::Events::EventDispatcher","GxG/Events/EventDispatcher.html#method-i-create_event_queue","(settings={})",""],["create_invite","Blather::MUC::Invite","Blather/MUC/Invite.html#method-i-create_invite","()",""],["create_item","Blather::MUC::Admin::Members","Blather/MUC/Admin/Members.html#method-i-create_item","()",""],["create_mailbox","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-create_mailbox","(mailbox=nil)",""],["create_password","Blather::MUC::Invite","Blather/MUC/Invite.html#method-i-create_password","()",""],["create_password","Blather::MUC::Join","Blather/MUC/Join.html#method-i-create_password","()",""],["create_reason","Blather::MUC::Invite","Blather/MUC/Invite.html#method-i-create_reason","()",""],["create_reason","Blather::MUC::Owner::Destroy","Blather/MUC/Owner/Destroy.html#method-i-create_reason","()",""],["create_vfs_permission","GxG::Database::Database","GxG/Database/Database.html#method-i-create_vfs_permission","(file_id=nil, credential=nil, permission={:execute => false, :rename => false, :move => false, :destroy => false, :create => false, :write => false, :read => false})",""],["credential","GxG::Storage::Volume","GxG/Storage/Volume.html#method-i-credential","()",""],["cron","GxG::Events::EventDispatcher","GxG/Events/EventDispatcher.html#method-i-cron","(expression=\"\",&block)",""],["currency_string","Padrino::Helpers::TagHelpers","Padrino/Helpers/TagHelpers.html#method-i-currency_string","(amount=0.0)",""],["current_user","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-i-current_user","()",""],["cycle","GxG::ByteArray","GxG/ByteArray.html#method-i-cycle","(iterations=nil,&block)",""],["daemon","GxG::Engine","GxG/Engine.html#method-c-daemon","(*args)",""],["data","Blather::MUC::Owner::Configure","Blather/MUC/Owner/Configure.html#method-i-data","()",""],["data","GxG::ByteArray","GxG/ByteArray.html#method-i-data","()",""],["data=","Blather::MUC::Owner::Configure","Blather/MUC/Owner/Configure.html#method-i-data-3D","(data = :default)",""],["database","GxG::Storage::Volume","GxG/Storage/Volume.html#method-i-database","()",""],["datepicker_tag","Padrino::Helpers::TagHelpers","Padrino/Helpers/TagHelpers.html#method-i-datepicker_tag","(the_id=nil,title=\"\")",""],["db_address","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-db_address","()",""],["db_address","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-db_address","()",""],["db_format","GxG::Database::Database","GxG/Database/Database.html#method-i-db_format","(format_options={})",""],["db_formatted?","GxG::Database::Database","GxG/Database/Database.html#method-i-db_formatted-3F","()",""],["db_list","GxG::Database::Database","GxG/Database/Database.html#method-i-db_list","()",""],["db_migration","GxG::Database::Database","GxG/Database/Database.html#method-i-db_migration","()",""],["db_path","GxG::Storage::Volume","GxG/Storage/Volume.html#method-i-db_path","(subpath=\"\")",""],["db_permissions","GxG::Database::Database","GxG/Database/Database.html#method-i-db_permissions","()","<p>Permission Handling methods\n"],["db_register","GxG::Database::Database","GxG/Database/Database.html#method-i-db_register","(the_db)","<p>Authority support\n"],["db_unregister","GxG::Database::Database","GxG/Database/Database.html#method-i-db_unregister","(the_db)",""],["dclone","GxG::ByteArray","GxG/ByteArray.html#method-i-dclone","()",""],["deactivate","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-deactivate","()",""],["deactivate","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-deactivate","()",""],["debug","GxG::ReturnResponse","GxG/ReturnResponse.html#method-i-debug","()",""],["decline","GxG::Networking::XmppAgentFileTransfer","GxG/Networking/XmppAgentFileTransfer.html#method-i-decline","()",""],["decline","GxG::Networking::XmppAgentInvitation","GxG/Networking/XmppAgentInvitation.html#method-i-decline","()",""],["decline_file_transfer","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-i-decline_file_transfer","(the_transfer_uuid=nil)",""],["decline_invitation","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-i-decline_invitation","(the_invitation_uuid=nil)",""],["decode64","String","String.html#method-i-decode64","()",""],["decode64!","String","String.html#method-i-decode64-21","()",""],["decrypt","String","String.html#method-i-decrypt","(withkey=\"\")",""],["default_room_configuration","GxG::Networking::XmppAgentConversation","GxG/Networking/XmppAgentConversation.html#method-i-default_room_configuration","(options={})",""],["delete","GxG::ByteArray","GxG/ByteArray.html#method-i-delete","(*args,&block)",""],["delete","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-delete","(key=nil)",""],["delete","GxG::Networking::HttpClient","GxG/Networking/HttpClient.html#method-i-delete","(the_url=nil, options={})",""],["delete","GxG::Networking::HttpsClient","GxG/Networking/HttpsClient.html#method-i-delete","(the_url=nil, options={})",""],["delete","GxG::Networking::HttpsClientWithPem","GxG/Networking/HttpsClientWithPem.html#method-i-delete","(the_url=nil, options={:follow_symlinks => true})",""],["delete","GxG::Networking::RestClient","GxG/Networking/RestClient.html#method-i-delete","(the_url=nil, options={}, &block)",""],["delete_at","GxG::ByteArray","GxG/ByteArray.html#method-i-delete_at","(*args)",""],["delete_at","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-delete_at","(indexer=nil)",""],["delete_event_queue","GxG::Events::EventDispatcher","GxG/Events/EventDispatcher.html#method-i-delete_event_queue","(queue=nil)",""],["delete_if","GxG::ByteArray","GxG/ByteArray.html#method-i-delete_if","(&block)",""],["descendants","Class","Class.html#method-i-descendants","()","<p>Attribution : stackoverflow.com/questions/2393697/look-up-all-descendants-of-a-class-in-ruby\n"],["descriptor_heap_used","GxG::Engine","GxG/Engine.html#method-c-descriptor_heap_used","()",""],["descriptor_limits","GxG::Engine","GxG/Engine.html#method-c-descriptor_limits","()","<p>Descriptors in general\n"],["destroy","Blather::DSL::MultiUserChat","Blather/DSL/MultiUserChat.html#method-i-destroy","(reason = nil)","<p>&lt;iq from=&#39;crone1@shakespeare.lit/desktop&#39;\n\n<pre>  id=&#39;begone&#39;\n  to=&#39;heath@chat.shakespeare.lit&#39;\n ...</pre>\n"],["destroy","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-destroy","()",""],["destroy","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-destroy","()",""],["destroy_by_uuid","GxG::Database::Database","GxG/Database/Database.html#method-i-destroy_by_uuid","(credential=nil, the_uuid=nil)",""],["destroy_vfs_permission","GxG::Database::Database","GxG/Database/Database.html#method-i-destroy_vfs_permission","(file_id=nil, credential=nil)",""],["detach","GxG::Engine","GxG/Engine.html#method-c-detach","(*args)",""],["detail_mapping","GxG::Engine","GxG/Engine.html#method-c-detail_mapping","()",""],["determine_engine_load","GxG::Engine","GxG/Engine.html#method-c-determine_engine_load","()",""],["determine_event_allocations","GxG::Engine","GxG/Engine.html#method-c-determine_event_allocations","()",""],["determine_loads","GxG::Engine","GxG/Engine.html#method-c-determine_loads","()",""],["determine_memory_load","GxG::Engine","GxG/Engine.html#method-c-determine_memory_load","()",""],["dialog_tag","Padrino::Helpers::TagHelpers","Padrino/Helpers/TagHelpers.html#method-i-dialog_tag","(the_id=nil, title=\"\", content=\"\", &block)",""],["directory","GxG::Storage::Volume","GxG/Storage/Volume.html#method-i-directory","()",""],["disassociate","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-i-disassociate","(recipient=nil)",""],["disconnected","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-disconnected","(&block)","<p>### Wrapper for “handle :disconnected”\n<p>This is run after the connection has been shut down. …\n"],["discover","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-discover","(what, who, where, &callback)","<p>### Request items or info from an entity\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">discover</span> (<span class=\"ruby-identifier\">items</span><span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">info</span>), [<span class=\"ruby-identifier\">jid</span>], [<span class=\"ruby-identifier\">node</span>] <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">response</span><span class=\"ruby-operator\">|</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["download","GxG::Networking::SftpClient","GxG/Networking/SftpClient.html#method-i-download","(the_remote_source=nil, the_destination=nil, options={}, &progress_block)",""],["download","GxG::Networking::SshClient","GxG/Networking/SshClient.html#method-i-download","(the_remote_source=nil, the_destination=nil, options={}, &progress_block)",""],["download_directory","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-download_directory","()",""],["download_directory","GxG::Networking::XmppAgentFileTransfer","GxG/Networking/XmppAgentFileTransfer.html#method-i-download_directory","()",""],["download_directory=","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-download_directory-3D","(the_path=nil)",""],["download_directory=","GxG::Networking::XmppAgentFileTransfer","GxG/Networking/XmppAgentFileTransfer.html#method-i-download_directory-3D","(the_path=nil)",""],["drop","GxG::ByteArray","GxG/ByteArray.html#method-i-drop","(length)",""],["drop_while","GxG::ByteArray","GxG/ByteArray.html#method-i-drop_while","(&block)",""],["dup","Float","Float.html#method-i-dup","()",""],["dup","GxG::ByteArray","GxG/ByteArray.html#method-i-dup","()",""],["dup","GxG::Database::Database","GxG/Database/Database.html#method-i-dup","()",""],["dup","NilClass","NilClass.html#method-i-dup","()",""],["dup","Struct","Struct.html#method-i-dup","()",""],["dup","Symbol","Symbol.html#method-i-dup","()",""],["each","GxG::ByteArray","GxG/ByteArray.html#method-i-each","(&block)","<p>TODO: GxG::ByteArray.each_index/each_with_index: improve memory efficiency and speed significantly (!) …\n"],["each","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-each","(&block)",""],["each","GxG::Enumerator","GxG/Enumerator.html#method-i-each","(&block)",""],["each","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-each","(separator=$/, limit=nil,&block)",""],["each_byte","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-each_byte","(&block)",""],["each_byte","String","String.html#method-i-each_byte","(&block)",""],["each_byte_with_index","String","String.html#method-i-each_byte_with_index","(offset=0,&block)",""],["each_char","GxG::Support::Library::SocketRW","GxG/Support/Library/SocketRW.html#method-i-each_char","(&block)",""],["each_char","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-each_char","(&block)",""],["each_char","String","String.html#method-i-each_char","(&block)",""],["each_char_with_index","String","String.html#method-i-each_char_with_index","(offset=0,&block)",""],["each_codepoint","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-each_codepoint","(&block)",""],["each_codepoint","String","String.html#method-i-each_codepoint","(&block)",""],["each_codepoint_with_index","String","String.html#method-i-each_codepoint_with_index","(offset=0,&block)",""],["each_index","GxG::ByteArray","GxG/ByteArray.html#method-i-each_index","(&block)",""],["each_index","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-each_index","(&block)",""],["each_line","GxG::Support::Library::SocketRW","GxG/Support/Library/SocketRW.html#method-i-each_line","(*args, &block)",""],["each_line","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-each_line","(separator=$/, limit=nil,&block)",""],["each_line","String","String.html#method-i-each_line","(separator=$/,&block)","<p>Note: documentation: recommend use of these methods and NOT those which they call to ensure cooperative …\n"],["each_line_with_index","String","String.html#method-i-each_line_with_index","(separator=$/,offset=0,&block)",""],["each_pair","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-each_pair","(&block)",""],["each_transcoded_byte","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-each_transcoded_byte","(&block)",""],["each_with_index","GxG::ByteArray","GxG/ByteArray.html#method-i-each_with_index","(offset=0,&block)",""],["each_with_index","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-each_with_index","(offset=0,&block)",""],["each_with_index","GxG::Enumerator","GxG/Enumerator.html#method-i-each_with_index","(offset=0,&block)",""],["effective_element_permission","GxG::Database::Database","GxG/Database/Database.html#method-i-effective_element_permission","(table=:unspecified, dbid=0, credential=nil)","<p>DB Objects\n"],["effective_uuid_permission","GxG::Database::Database","GxG/Database/Database.html#method-i-effective_uuid_permission","(uuid=nil, credential=nil)",""],["effective_vfs_permission","GxG::Database::Database","GxG/Database/Database.html#method-i-effective_vfs_permission","(file_id=nil, credential=nil)",""],["egid","GxG::Engine","GxG/Engine.html#method-c-egid","(*args)",""],["element_byte_size","GxG::Database::Database","GxG/Database/Database.html#method-i-element_byte_size","(table=:unspecified, dbid=0)",""],["element_create","GxG::Database::Database","GxG/Database/Database.html#method-i-element_create","(the_table=:unspecified, the_record=nil)",""],["element_destroy","GxG::Database::Database","GxG/Database/Database.html#method-i-element_destroy","(credential=nil,table=:unspecified,dbid=0, options={})",""],["element_exists?","GxG::Database::Database","GxG/Database/Database.html#method-i-element_exists-3F","(the_table=:unspecified, the_dbid=0)","<p>Data Handling methods\n"],["element_in_trash?","GxG::Database::Database","GxG/Database/Database.html#method-i-element_in_trash-3F","(table=:unspecified, dbid=0)",""],["element_in_use?","GxG::Database::Database","GxG/Database/Database.html#method-i-element_in_use-3F","(db_table=:unspecified, dbid = 0)",""],["element_manifest","GxG::Database::Database","GxG/Database/Database.html#method-i-element_manifest","(the_table=:unspecified, the_dbid=0, everything=false)",""],["element_parent_address","GxG::Database::Database","GxG/Database/Database.html#method-i-element_parent_address","(the_table=:unspecified, the_dbid=0)",""],["element_permissions","GxG::Database::Database","GxG/Database/Database.html#method-i-element_permissions","(table=:unspecified, dbid=0, options={})","<p>Raw Permission Handling methods\n"],["element_permissions_by_uuid","GxG::Database::Database","GxG/Database/Database.html#method-i-element_permissions_by_uuid","(the_uuid=nil,options={})",""],["element_permissions_manifest","GxG::Database::Database","GxG/Database/Database.html#method-i-element_permissions_manifest","(table=:unspecified, dbid=0, options={})",""],["element_recover","GxG::Database::Database","GxG/Database/Database.html#method-i-element_recover","(table=:unspecified, dbid=0)",""],["element_retrieve","GxG::Database::Database","GxG/Database/Database.html#method-i-element_retrieve","(the_table=:unspecified, the_filter={}, options={})",""],["element_table_by_index","GxG::Database::Database","GxG/Database/Database.html#method-c-element_table_by_index","(the_index=0)",""],["element_table_for_instance","GxG::Database::Database","GxG/Database/Database.html#method-c-element_table_for_instance","(the_instance=nil)",""],["element_table_index","GxG::Database::Database","GxG/Database/Database.html#method-c-element_table_index","(the_key=:unspecified)",""],["element_tables","GxG::Database::Database","GxG/Database/Database.html#method-c-element_tables","()",""],["element_update","GxG::Database::Database","GxG/Database/Database.html#method-i-element_update","(the_table=:unspecified, the_filter={}, the_record=nil)",""],["element_version","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-element_version","(index=nil)",""],["element_version","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-element_version","(key=nil)",""],["empty?","GxG::ByteArray","GxG/ByteArray.html#method-i-empty-3F","()",""],["empty_trash","GxG::Database::Database","GxG/Database/Database.html#method-i-empty_trash","()",""],["encode64","String","String.html#method-i-encode64","()",""],["encode64!","String","String.html#method-i-encode64-21","()",""],["encoded_value","GxG::Version","GxG/Version.html#method-i-encoded_value","()",""],["encrypt","String","String.html#method-i-encrypt","(withkey=\"\")",""],["enforce_permission_policy","GxG::Database::Database","GxG/Database/Database.html#method-i-enforce_permission_policy","(event={})",""],["engine","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-i-engine","()",""],["engine_data_keys","GxG::Engine","GxG/Engine.html#method-c-engine_data_keys","(other_platform=nil)",""],["engine_gear","GxG::Engine","GxG/Engine.html#method-c-engine_gear","()",""],["engine_load","GxG::Engine","GxG/Engine.html#method-c-engine_load","()",""],["engine_load_high?","GxG::Engine","GxG/Engine.html#method-c-engine_load_high-3F","()",""],["engine_load_low?","GxG::Engine","GxG/Engine.html#method-c-engine_load_low-3F","()",""],["engine_load_medium?","GxG::Engine","GxG/Engine.html#method-c-engine_load_medium-3F","()",""],["entities","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-i-entities","()","<p>Entities\n"],["entitiies","GxG::Communications::BridgeAdapter","GxG/Communications/BridgeAdapter.html#method-i-entitiies","()","<p>Basic Entity Support\n"],["entity_status","GxG::Communications::BridgeAdapter","GxG/Communications/BridgeAdapter.html#method-i-entity_status","(the_address=nil)",""],["entity_status","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-i-entity_status","(the_address=nil)",""],["entries","GxG::Networking::FtpClient","GxG/Networking/FtpClient.html#method-i-entries","(dir_name=nil, filter=nil)",""],["entries","GxG::Networking::SftpClient","GxG/Networking/SftpClient.html#method-i-entries","(the_path=nil, pattern=nil, flags=0, &block)","<p>Remote File System Operations and Objects\n"],["entries","GxG::Storage::FileSpace","GxG/Storage/FileSpace.html#method-i-entries","(the_path=\"\", as_credential=nil)",""],["entries","GxG::Storage::Volume","GxG/Storage/Volume.html#method-i-entries","(subpath=\"\", as_credential=nil, options={:follow_symlinks => true})",""],["environment","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-i-environment","()",""],["eof?","GxG::Support::Library::SocketRW","GxG/Support/Library/SocketRW.html#method-i-eof-3F","()",""],["eql?","GxG::ByteArray","GxG/ByteArray.html#method-i-eql-3F","(*args)",""],["error","GxG::ReturnResponse","GxG/ReturnResponse.html#method-i-error","()",""],["euid","GxG::Engine","GxG/Engine.html#method-c-euid","(*args)",""],["event_allocation_envelope","GxG::Engine","GxG/Engine.html#method-c-event_allocation_envelope","()",""],["event_descriptors_threshold","GxG::Engine","GxG/Engine.html#method-c-event_descriptors_threshold","()",""],["event_minimum_threshold","GxG::Engine","GxG/Engine.html#method-c-event_minimum_threshold","()",""],["events_in_use","GxG::Engine","GxG/Engine.html#method-c-events_in_use","()",""],["every","GxG::Events::EventDispatcher","GxG/Events/EventDispatcher.html#method-i-every","(expression=\"\", &block)",""],["exec","GxG::Engine","GxG/Engine.html#method-c-exec","(*args)","<p>overrides\n<p>[:exec, :fork, :spawn, :exit!, :exit, :abort, :kill, :wait, :wait2, :waitpid, :waitpid2, :waitall, …\n"],["exist?","GxG::Storage::FileSpace","GxG/Storage/FileSpace.html#method-i-exist-3F","(the_path=\"\")",""],["exist?","GxG::Storage::Volume","GxG/Storage/Volume.html#method-i-exist-3F","(subpath=\"\")",""],["exit","GxG::Engine","GxG/Engine.html#method-c-exit","(*args)",""],["exit!","GxG::Engine","GxG/Engine.html#method-c-exit-21","(*args)",""],["export","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-export","(options={:exclude_file_segments=>false})",""],["export","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-export","(options={:exclude_file_segments=>false})",""],["extend_element_permissions","GxG::Database::Database","GxG/Database/Database.html#method-i-extend_element_permissions","(source_table=:unspecified, source_dbid=0, dest_table=:unspecified, dest_dbid=0)",""],["external_conversion","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-external_conversion","()",""],["external_conversion=","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-external_conversion-3D","(*args)",""],["external_encoding=","GxG::IO::IO","GxG/IO/IO.html#method-i-external_encoding-3D","(*args)","<p>Public Instance Methods:\n"],["external_encoding=","GxG::IO::StringIO","GxG/IO/StringIO.html#method-i-external_encoding-3D","(*args)",""],["external_field_separator","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-external_field_separator","()",""],["external_field_separator=","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-external_field_separator-3D","(*args)",""],["external_newline","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-external_newline","()",""],["external_newline=","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-external_newline-3D","(*args)",""],["external_record_separator","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-external_record_separator","()",""],["external_record_separator=","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-external_record_separator-3D","(*args)",""],["fail","GxG::Events::Message","GxG/Events/Message.html#method-i-fail","(input=nil)",""],["fcntl","GxG::IO::IO","GxG/IO/IO.html#method-i-fcntl","(*args)","<p>portable, cross-platform facade for Fcntl (even under Winderz)\n"],["fcntl","StringIO","StringIO.html#method-i-fcntl","(*args)",""],["fetch","GxG::ByteArray","GxG/ByteArray.html#method-i-fetch","(*args,&block)",""],["fetch_manifest","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-fetch_manifest","(uid_set=[])",""],["fetch_message","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-fetch_message","(uid=nil)",""],["field_separator_used","GxG::Support::Library::Transcoding","GxG/Support/Library/Transcoding.html#method-i-field_separator_used","(io_channel=:external)",""],["file_descriptors","GxG::Engine","GxG/Engine.html#method-c-file_descriptors","()",""],["file_details","GxG::Networking::XmppAgentFileTransfer","GxG/Networking/XmppAgentFileTransfer.html#method-i-file_details","()",""],["file_system?","GxG::Storage::Volume","GxG/Storage/Volume.html#method-i-file_system-3F","()",""],["file_transfers","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-i-file_transfers","()","<p>File Transfers\n"],["file_transfers","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-file_transfers","()",""],["file_type","File","File.html#method-i-file_type","()",""],["fill","GxG::ByteArray","GxG/ByteArray.html#method-i-fill","(*args,&block)",""],["filter_data","GxG::ByteArray","GxG/ByteArray.html#method-i-filter_data","(the_data=\"\")",""],["filter_parameters","GxG::ByteArray","GxG/ByteArray.html#method-i-filter_parameters","(*args)",""],["find_file_mimetype","File","File.html#method-c-find_file_mimetype","(the_file=nil)",""],["find_file_transfer","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-find_file_transfer","(reference=nil, use_session = false)",""],["find_index","GxG::ByteArray","GxG/ByteArray.html#method-i-find_index","(*args, &block)",""],["find_index","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-find_index","(the_value)",""],["find_local","GxG","GxG.html#method-i-find_local","(the_key)",""],["first","GxG::ByteArray","GxG/ByteArray.html#method-i-first","(*args)",""],["flags","GxG::IO::StringIO","GxG/IO/StringIO.html#method-i-flags","()","<p>Public instance methods\n"],["flags","IO","IO.html#method-i-flags","()",""],["flags","StringIO","StringIO.html#method-i-flags","()",""],["flatten","GxG::ByteArray","GxG/ByteArray.html#method-i-flatten","()",""],["flatten!","GxG::ByteArray","GxG/ByteArray.html#method-i-flatten-21","()",""],["fork","GxG::Engine","GxG/Engine.html#method-c-fork","(*args)",""],["format","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-format","()",""],["format=","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-format-3D","(the_format=nil)",""],["format_create","GxG::Database::Database","GxG/Database/Database.html#method-i-format_create","(format_record=nil)",""],["format_destroy","GxG::Database::Database","GxG/Database/Database.html#method-i-format_destroy","(search_options={})",""],["format_list","GxG::Database::Database","GxG/Database/Database.html#method-i-format_list","(search_options={})",""],["format_load","GxG::Database::Database","GxG/Database/Database.html#method-i-format_load","(search_options={})",""],["format_template","GxG::Database::Database","GxG/Database/Database.html#method-i-format_template","(type=:structure)","<p>Format handing methods\n"],["format_update","GxG::Database::Database","GxG/Database/Database.html#method-i-format_update","(format_record=nil)",""],["fragment","URI::Generic","URI/Generic.html#method-i-fragment","()",""],["fragment=","URI::Generic","URI/Generic.html#method-i-fragment-3D","(v)",""],["freeze","GxG::ByteArray","GxG/ByteArray.html#method-i-freeze","()",""],["from_hash","URI::Generic","URI/Generic.html#method-i-from_hash","(the_hash={})",""],["from_json","String","String.html#method-i-from_json","(symbolize_names = true)",""],["gear","GxG::Engine","GxG/Engine.html#method-c-gear","()",""],["get","GxG::Networking::HttpClient","GxG/Networking/HttpClient.html#method-i-get","(the_url=nil, options={:follow_redirects => true})",""],["get","GxG::Networking::HttpsClient","GxG/Networking/HttpsClient.html#method-i-get","(the_url=nil, options={:follow_redirects => true, :use_ssl => true})",""],["get","GxG::Networking::HttpsClientWithPem","GxG/Networking/HttpsClientWithPem.html#method-i-get","(the_url=nil, options={:follow_symlinks => true})",""],["get","GxG::Networking::RestClient","GxG/Networking/RestClient.html#method-i-get","(the_url=nil, options={}, &block)",""],["get_at_path","Array","Array.html#method-i-get_at_path","(the_path=\"/\")",""],["get_at_path","GxG::ByteArray","GxG/ByteArray.html#method-i-get_at_path","(the_path=\"/\")",""],["get_at_path","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-get_at_path","(the_path=\"/\")",""],["get_at_path","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-get_at_path","(the_path=\"/\")",""],["get_at_path","GxG::Events::Message","GxG/Events/Message.html#method-i-get_at_path","(*args)",""],["get_at_path","Hash","Hash.html#method-i-get_at_path","(the_path=\"/\")",""],["get_configuration","Blather::DSL::MultiUserChat","Blather/DSL/MultiUserChat.html#method-i-get_configuration","(&block)",""],["get_delegate","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-get_delegate","()",""],["get_delegate","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-get_delegate","()",""],["get_engine_data","GxG::Engine","GxG/Engine.html#method-c-get_engine_data","(keys=[])",""],["get_file","GxG::Networking::FtpClient","GxG/Networking/FtpClient.html#method-i-get_file","(file_name=nil, save_path=nil)",""],["get_handler_class","GxG::Networking","GxG/Networking.html#method-c-get_handler_class","(the_url=nil)",""],["get_message","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-i-get_message","(the_channel_uuid=nil, the_message_uuid=nil)",""],["get_messages_by_context","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-i-get_messages_by_context","(the_channel_uuid=nil, the_context_uuid=nil)",""],["get_messages_by_sender","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-i-get_messages_by_sender","(the_channel_uuid=nil, the_sender=nil)",""],["get_permissions","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-get_permissions","()","<p>Permission Management:\n"],["get_permissions","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-get_permissions","()","<p>Review: move to Database class as generic toolbox method at some point:\n"],["get_permissions","GxG::Storage::FileSpace","GxG/Storage/FileSpace.html#method-i-get_permissions","(the_path=\"\", the_credential=nil)",""],["get_permissions","GxG::Storage::Volume","GxG/Storage/Volume.html#method-i-get_permissions","(subpath=\"\", the_credential=nil)",""],["get_quota","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-get_quota","(mailbox=nil)",""],["get_reservation","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-get_reservation","()",""],["get_reservation","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-get_reservation","()",""],["get_status","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-get_status","()",""],["getbyte","GxG::Support::Library::SocketRW","GxG/Support/Library/SocketRW.html#method-i-getbyte","()",""],["getbyte","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-getbyte","()",""],["getbytes","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-getbytes","()",""],["getc","GxG::Support::Library::SocketRW","GxG/Support/Library/SocketRW.html#method-i-getc","(*args)",""],["getc","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-getc","()",""],["getpgid","GxG::Engine","GxG/Engine.html#method-c-getpgid","(*args)",""],["getpgrp","GxG::Engine","GxG/Engine.html#method-c-getpgrp","(*args)","<p>:getpgrp, :setpgrp, :getpgid, :setpgid, :setsid, :getpriority, :setpriority, :getrlimit, :setrlimit, …\n"],["getpriority","GxG::Engine","GxG/Engine.html#method-c-getpriority","(*args)",""],["getrlimit","GxG::Engine","GxG/Engine.html#method-c-getrlimit","(key)",""],["gets","GxG::Support::Library::SocketRW","GxG/Support/Library/SocketRW.html#method-i-gets","(*args)",""],["gets","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-gets","(*args)",""],["gid","GxG::Engine","GxG/Engine.html#method-c-gid","(*args)",""],["group_create","GxG::Database::Database","GxG/Database/Database.html#method-i-group_create","(options={})",""],["group_credential","GxG::Database::Database","GxG/Database/Database.html#method-i-group_credential","(details={})",""],["group_delete","GxG::Database::Database","GxG/Database/Database.html#method-i-group_delete","(group_uuid=nil)",""],["group_exist?","GxG::Database::Database","GxG/Database/Database.html#method-i-group_exist-3F","(the_specifier=nil)",""],["group_fetch","GxG::Database::Database","GxG/Database/Database.html#method-i-group_fetch","(search_options={})",""],["group_manifest","GxG::Database::Database","GxG/Database/Database.html#method-i-group_manifest","()",""],["group_roles","GxG::Database::Database","GxG/Database/Database.html#method-i-group_roles","(group_uuid=nil)",""],["group_update","GxG::Database::Database","GxG/Database/Database.html#method-i-group_update","(group_uuid=nil, options={})",""],["groups","GxG::Engine","GxG/Engine.html#method-c-groups","(*args)",""],["gxg_button_tag","Padrino::Helpers::TagHelpers","Padrino/Helpers/TagHelpers.html#method-i-gxg_button_tag","(the_id=nil, options={})",""],["gxg_export","Array","Array.html#method-i-gxg_export","()",""],["gxg_export","Hash","Hash.html#method-i-gxg_export","()",""],["gxg_import","Array","Array.html#method-c-gxg_import","(the_exported_record=nil)",""],["gxg_import","Hash","Hash.html#method-c-gxg_import","(the_exported_record=nil)",""],["gxg_message_to_xmpp","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-gxg_message_to_xmpp","(the_message=nil)",""],["gxg_permissions_to_mode","File","File.html#method-c-gxg_permissions_to_mode","(permissions={:owner => { :execute => false, :rename => false, :move => false, :destroy => false, :create => false, :write => false, :read => false }, :group => { :execute => false, :rename => false, :move => false, :destroy => false, :create => false, :write => false, :read => false }, :other => { :execute => false, :rename => false, :move => false, :destroy => false, :create => false, :write => false, :read => false }}, type = :file)",""],["gxg_permissions_to_unix","File","File.html#method-c-gxg_permissions_to_unix","(permissions={:owner => { :execute => false, :rename => false, :move => false, :destroy => false, :create => false, :write => false, :read => false }, :group => { :execute => false, :rename => false, :move => false, :destroy => false, :create => false, :write => false, :read => false }, :other => { :execute => false, :rename => false, :move => false, :destroy => false, :create => false, :write => false, :read => false }}, type = :file)",""],["halt","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-halt","()","<p>### Halt the handler chain\n<p>Use this to stop the propogation of the stanza though the handler chain.\n<p>@example …\n"],["halt_zmq_processing","GxG::Networking::ZmqNode","GxG/Networking/ZmqNode.html#method-i-halt_zmq_processing","()",""],["handle","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-handle","(handler, *guards, &block)","<p>### Set handler for a stanza type\n<p>@param [Symbol] handler the stanza type it should handle @param [guards] …\n"],["handle_error","Object","Object.html#method-i-handle_error","(the_error={})",""],["hash","GxG::ByteArray","GxG/ByteArray.html#method-i-hash","()",""],["heap_used","Object","Object.html#method-i-heap_used","(options={})",""],["help","GxG::Networking::FtpClient","GxG/Networking/FtpClient.html#method-i-help","()",""],["host","GxG::Networking::SmtpClient","GxG/Networking/SmtpClient.html#method-i-host","()",""],["host","URI::Generic","URI/Generic.html#method-i-host","()",""],["host=","URI::Generic","URI/Generic.html#method-i-host-3D","(v)",""],["hostname","URI::Generic","URI/Generic.html#method-i-hostname","()",""],["hostname=","URI::Generic","URI/Generic.html#method-i-hostname-3D","(v)",""],["html?","String","String.html#method-i-html-3F","()","<p>def from_xml(options={})\n\n<pre>#\nunless options[:no_test] == true\n  unless self.xml?()\n    raise Exception, ...</pre>\n"],["id","GxG::Events::Message","GxG/Events/Message.html#method-i-id","()",""],["identity","GxG::Networking::ZMQ::ZmqAdapter","GxG/Networking/ZMQ/ZmqAdapter.html#method-i-identity","()",""],["import","Blather::MUC::Invite","Blather/MUC/Invite.html#method-c-import","(node)",""],["import","GxG::Database::Database","GxG/Database/Database.html#method-i-import","(credential=nil, the_record=nil)","<p>Import methods (deprecated in favor of sychronize_records)\n"],["import_services_file","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-i-import_services_file","()",""],["import_update","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-import_update","(the_record=nil)",""],["in","GxG::Events::EventDispatcher","GxG/Events/EventDispatcher.html#method-i-in","(expression=\"\", &block)",""],["in_progress?","GxG::Networking::XmppAgentFileTransfer","GxG/Networking/XmppAgentFileTransfer.html#method-i-in_progress-3F","()",""],["include?","GxG::ByteArray","GxG/ByteArray.html#method-i-include-3F","(*args)",""],["include?","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-include-3F","(the_value)",""],["include?","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-include-3F","(the_key)",""],["increment","GxG::Version","GxG/Version.html#method-i-increment","(params={:revision => 1})",""],["increment_version","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-increment_version","()",""],["increment_version","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-increment_version","()",""],["index","GxG::ByteArray","GxG/ByteArray.html#method-i-index","(*args, &block)",""],["indexes","GxG::ByteArray","GxG/ByteArray.html#method-i-indexes","(*args)",""],["indices","GxG::ByteArray","GxG/ByteArray.html#method-i-indices","(*args)",""],["info","GxG::Networking::XmppAgentFileTransfer","GxG/Networking/XmppAgentFileTransfer.html#method-i-info","()",""],["info","GxG::ReturnResponse","GxG/ReturnResponse.html#method-i-info","()",""],["inherit","Blather::MUC::Invite","Blather/MUC/Invite.html#method-i-inherit","(node)",""],["initgroups","GxG::Engine","GxG/Engine.html#method-c-initgroups","(*args)","<p>:initgroups, :groups, :maxgroups, :daemon, :times]\n"],["initialize_clone","Float","Float.html#method-i-initialize_clone","()",""],["initialize_clone","GxG::ByteArray","GxG/ByteArray.html#method-i-initialize_clone","()",""],["initialize_clone","GxG::Database::Database","GxG/Database/Database.html#method-i-initialize_clone","()","<p>Comm objects cannot be cloned - returns nil\n"],["initialize_clone","NilClass","NilClass.html#method-i-initialize_clone","()",""],["initialize_clone","Struct","Struct.html#method-i-initialize_clone","()",""],["initialize_clone","Symbol","Symbol.html#method-i-initialize_clone","()",""],["initialize_copy","GxG::ByteArray","GxG/ByteArray.html#method-i-initialize_copy","()",""],["initialize_dup","Float","Float.html#method-i-initialize_dup","()",""],["initialize_dup","GxG::ByteArray","GxG/ByteArray.html#method-i-initialize_dup","()",""],["initialize_dup","GxG::Database::Database","GxG/Database/Database.html#method-i-initialize_dup","()",""],["initialize_dup","NilClass","NilClass.html#method-i-initialize_dup","()",""],["initialize_dup","Struct","Struct.html#method-i-initialize_dup","()",""],["initialize_dup","Symbol","Symbol.html#method-i-initialize_dup","()",""],["insert","GxG::ByteArray","GxG/ByteArray.html#method-i-insert","(*args)",""],["inspect","GxG::ByteArray","GxG/ByteArray.html#method-i-inspect","()",""],["inspect","GxG::Database::Database","GxG/Database/Database.html#method-i-inspect","()",""],["inspect","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-inspect","()",""],["inspect","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-inspect","()",""],["inspect","GxG::Events::Message","GxG/Events/Message.html#method-i-inspect","()",""],["inspect","GxG::IO::StringIO","GxG/IO/StringIO.html#method-i-inspect","()","<p>:reopen, :string, :string, :lineno, :lineno, :close_read, :close_write, :closed?, :closed_read?, :closed_write?, …\n"],["inspect","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-inspect","()",""],["inspect","GxG::Networking::XmppAgentConversation","GxG/Networking/XmppAgentConversation.html#method-i-inspect","()",""],["inspect","GxG::Networking::XmppAgentFileTransfer","GxG/Networking/XmppAgentFileTransfer.html#method-i-inspect","()",""],["inspect","GxG::Networking::XmppAgentInvitation","GxG/Networking/XmppAgentInvitation.html#method-i-inspect","()",""],["inspect","GxG::ReturnResponse","GxG/ReturnResponse.html#method-i-inspect","()",""],["inspect","GxG::Storage::Volume","GxG/Storage/Volume.html#method-i-inspect","()",""],["inspect","GxG::Tuple","GxG/Tuple.html#method-i-inspect","()",""],["inspect","GxG::Version","GxG/Version.html#method-i-inspect","()",""],["inspect_queue","GxG::Events::EventDispatcher","GxG/Events/EventDispatcher.html#method-i-inspect_queue","(queue=:root)",""],["inspect_timers","GxG::Events::EventDispatcher","GxG/Events/EventDispatcher.html#method-i-inspect_timers","()",""],["interface","GxG::Communications::Bridge","GxG/Communications/Bridge.html#method-i-interface","()",""],["interface","GxG::Networking::SoapClient","GxG/Networking/SoapClient.html#method-i-interface","()",""],["interface","GxG::Networking::SoapDriver","GxG/Networking/SoapDriver.html#method-i-interface","()",""],["interface","GxG::Networking::XmlrpcClient","GxG/Networking/XmlrpcClient.html#method-i-interface","()",""],["internal_conversion","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-internal_conversion","()",""],["internal_conversion=","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-internal_conversion-3D","(*args)",""],["internal_encoding","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-internal_encoding","()",""],["internal_encoding=","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-internal_encoding-3D","(*args)",""],["internal_field_separator","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-internal_field_separator","()",""],["internal_field_separator=","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-internal_field_separator-3D","(*args)",""],["internal_newline","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-internal_newline","()",""],["internal_newline=","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-internal_newline-3D","(*args)",""],["internal_record_separator","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-internal_record_separator","()",""],["internal_record_separator=","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-internal_record_separator-3D","(*args)",""],["interpret","GxG::Units::Bytes","GxG/Units/Bytes.html#method-c-interpret","(quanta_string=\"\",interpret_for_locale=:en_US,interpret_for_numeric_base=10)",""],["interpret_mode","GxG::IO::IO","GxG/IO/IO.html#method-c-interpret_mode","(params={})",""],["interpret_units","GxG::Units","GxG/Units.html#method-c-interpret_units","(params={})",""],["intitialize","GxG::Networking::RestClient","GxG/Networking/RestClient.html#method-i-intitialize","()",""],["invitation","GxG::Networking::XmppAgentInvitation","GxG/Networking/XmppAgentInvitation.html#method-i-invitation","()","<p>Review : debug only\n"],["invitations","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-invitations","()",""],["invite","Blather::DSL::MultiUserChat","Blather/DSL/MultiUserChat.html#method-i-invite","(jid, reason = nil)","<p>&lt;message to=&#39;room@service&#39;&gt;\n\n<pre>&lt;x xmlns=&#39;http://jabber.org/protocol/muc#user&#39;&gt;\n  &lt;invite to=&#39;jid&#39;&gt; ...</pre>\n"],["invite_from","Blather::MUC::Invite","Blather/MUC/Invite.html#method-i-invite_from","()",""],["invite_to","Blather::MUC::Invite","Blather/MUC/Invite.html#method-i-invite_to","()",""],["invite_to=","Blather::MUC::Invite","Blather/MUC/Invite.html#method-i-invite_to-3D","(jid)",""],["is_any?","Object","Object.html#method-i-is_any-3F","(*args)","<p>public methods\n"],["iterative","Array","Array.html#method-i-iterative","(&block)",""],["iterative","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-iterative","(options={:include_inactive => true}, &block)",""],["iterative","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-iterative","(options={:include_inactive => true}, &block)",""],["iterative","Hash","Hash.html#method-i-iterative","(&block)",""],["iterative","Struct","Struct.html#method-i-iterative","(&block)","<p>def each_pair(&amp;block)\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># ok, bizarre : this method is listed in instance_methods but is missing when ...</span>\n</pre>\n"],["iterative_persist","GxG::Database::Database","GxG/Database/Database.html#method-i-iterative_persist","(old_root=nil, credential=nil)",""],["jid","Blather::Stanza::Presence::MUCUser","Blather/Stanza/Presence/MUCUser.html#method-i-jid","()",""],["jid","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-jid","()","<p>### The JID according to the server\n<p>@return [Blather::JID]\n"],["jid","GxG::Networking::XmppAgentConversation","GxG/Networking/XmppAgentConversation.html#method-i-jid","()",""],["jid=","Blather::Stanza::Presence::MUCUser","Blather/Stanza/Presence/MUCUser.html#method-i-jid-3D","(val)",""],["jid_domain","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-jid_domain","()",""],["jid_node","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-jid_node","()","<p>other supporting JID methods\n"],["jid_resource","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-jid_resource","()",""],["join","Blather::DSL::MultiUserChat","Blather/DSL/MultiUserChat.html#method-i-join","(reason = nil)",""],["join","GxG::ByteArray","GxG/ByteArray.html#method-i-join","(*args)",""],["join","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-join","(room, service, nickname = nil)","<p>### Helper method to join a MUC room\n<p>@overload join(room_jid, nickname)\n\n<pre> @param [Blather::JID, #to_s] room ...</pre>\n"],["join","GxG::Networking::XmppAgentConversation","GxG/Networking/XmppAgentConversation.html#method-i-join","(the_jid=nil, password=nil, options={})",""],["join_channel","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-i-join_channel","(channel_jid=nil, password=nil, options={})",""],["join_conversation","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-join_conversation","(the_jid=nil, password=nil, options={})",""],["json?","String","String.html#method-i-json-3F","()",""],["json_1?","String","String.html#method-i-json_1-3F","()",""],["json_2?","String","String.html#method-i-json_2-3F","()",""],["keep_if","GxG::ByteArray","GxG/ByteArray.html#method-i-keep_if","(&block)",""],["key","GxG::Tuple","GxG/Tuple.html#method-i-key","()",""],["key=","GxG::Tuple","GxG/Tuple.html#method-i-key-3D","(new_key=nil)",""],["keys","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-keys","()",""],["keys","GxG::Events::Message","GxG/Events/Message.html#method-i-keys","()","<p>Hash-like support methods:\n"],["keys","GxG::Networking::XmppAgentInvitation","GxG/Networking/XmppAgentInvitation.html#method-i-keys","()",""],["kill","GxG::Engine","GxG/Engine.html#method-c-kill","(*args)",""],["last","GxG::ByteArray","GxG/ByteArray.html#method-i-last","(*args)",""],["latency_reading","IO","IO.html#method-i-latency_reading","(old_reading=nil,&block)",""],["latency_reading","StringIO","StringIO.html#method-i-latency_reading","(old_reading=nil,&block)",""],["leave","Blather::DSL::MultiUserChat","Blather/DSL/MultiUserChat.html#method-i-leave","()",""],["leave","GxG::Networking::XmppAgentConversation","GxG/Networking/XmppAgentConversation.html#method-i-leave","(exit_string=nil)",""],["length","GxG::ByteArray","GxG/ByteArray.html#method-i-length","()",""],["limits","GxG::Communications::BridgeAdapter","GxG/Communications/BridgeAdapter.html#method-c-limits","()",""],["limits","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-c-limits","()",""],["lineno","GxG::Support::Library::SocketRW","GxG/Support/Library/SocketRW.html#method-i-lineno","()",""],["lineno=","GxG::Support::Library::SocketRW","GxG/Support/Library/SocketRW.html#method-i-lineno-3D","(*args)",""],["lines","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-lines","(separator=$/, limit=nil,&block)",""],["list","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-list","(reference=nil, mailbox=nil)",""],["list_subscriptions","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-list_subscriptions","(reference=nil, mailbox=nil)",""],["listen","GxG::Networking::ZMQ::ZmqAdapter","GxG/Networking/ZMQ/ZmqAdapter.html#method-i-listen","(&block)",""],["load_average","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-i-load_average","()",""],["login","GxG::Networking::FtpClient","GxG/Networking/FtpClient.html#method-i-login","(the_url=nil, options={})",""],["login","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-login","(user_id=nil, password=nil, options={:method => :auth})",""],["login","GxG::Networking::Pop3Client","GxG/Networking/Pop3Client.html#method-i-login","(user_id=nil,password=nil,options={})",""],["login","GxG::Networking::SftpClient","GxG/Networking/SftpClient.html#method-i-login","(the_url=nil, options={})",""],["login","GxG::Networking::SmtpClient","GxG/Networking/SmtpClient.html#method-i-login","(user_id=nil,password=nil,authentication_method=:plain)",""],["login","GxG::Networking::SoapClient","GxG/Networking/SoapClient.html#method-i-login","(the_url=nil, options={})",""],["login","GxG::Networking::SshClient","GxG/Networking/SshClient.html#method-i-login","(the_url=nil, options={})",""],["login","GxG::Networking::XmlrpcClient","GxG/Networking/XmlrpcClient.html#method-i-login","(the_url=nil, options={})",""],["login","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-login","(the_url=nil, options={})",""],["logout","GxG::Networking::FtpClient","GxG/Networking/FtpClient.html#method-i-logout","()",""],["logout","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-logout","()",""],["logout","GxG::Networking::Pop3Client","GxG/Networking/Pop3Client.html#method-i-logout","()",""],["logout","GxG::Networking::SftpClient","GxG/Networking/SftpClient.html#method-i-logout","()",""],["logout","GxG::Networking::SmtpClient","GxG/Networking/SmtpClient.html#method-i-logout","()",""],["logout","GxG::Networking::SoapClient","GxG/Networking/SoapClient.html#method-i-logout","()",""],["logout","GxG::Networking::SshClient","GxG/Networking/SshClient.html#method-i-logout","()",""],["logout","GxG::Networking::XmlrpcClient","GxG/Networking/XmlrpcClient.html#method-i-logout","()",""],["logout","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-logout","()",""],["lstat","StringIO","StringIO.html#method-i-lstat","(*args)",""],["make_directory","GxG::Networking::FtpClient","GxG/Networking/FtpClient.html#method-i-make_directory","(dir_name=nil)",""],["make_directory","GxG::Networking::SftpClient","GxG/Networking/SftpClient.html#method-i-make_directory","(the_path=nil, &block)",""],["make_link","GxG::Networking::SftpClient","GxG/Networking/SftpClient.html#method-i-make_link","(new_link_path=nil, existing_path=nil, symlink=true, &block)",""],["manager_running?","GxG::EventManager","GxG/EventManager.html#method-c-manager_running-3F","()",""],["map","GxG::ByteArray","GxG/ByteArray.html#method-i-map","(&block)",""],["map!","GxG::ByteArray","GxG/ByteArray.html#method-i-map-21","(&block)",""],["match","GxG::ByteArray","GxG/ByteArray.html#method-i-match","(regular_expression)",""],["maxgroups","GxG::Engine","GxG/Engine.html#method-c-maxgroups","(*args)",""],["maximum_buffer_size","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-i-maximum_buffer_size","()",""],["maximum_event_descriptors","GxG::Engine","GxG/Engine.html#method-c-maximum_event_descriptors","()","<p>Event Descriptors\n"],["maximum_file_descriptors","GxG::Engine","GxG/Engine.html#method-c-maximum_file_descriptors","()","<p>File Descriptors\n"],["maxsize","GxG::ByteArray","GxG/ByteArray.html#method-i-maxsize","()",""],["maxsize=","GxG::ByteArray","GxG/ByteArray.html#method-i-maxsize-3D","(*args)",""],["members","Blather::DSL::MultiUserChat","Blather/DSL/MultiUserChat.html#method-i-members","(&block)","<p>&lt;iq from=&#39;crone1@shakespeare.lit/desktop&#39;\n\n<pre>  id=&#39;member3&#39;\n  to=&#39;darkcave@chat.shakespeare.lit&#39; ...</pre>\n"],["memory","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-i-memory","()",""],["memory_available","GxG::Engine","GxG/Engine.html#method-c-memory_available","()",""],["memory_gear","GxG::Engine","GxG/Engine.html#method-c-memory_gear","()",""],["memory_limits","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-i-memory_limits","()",""],["memory_load","GxG::Engine","GxG/Engine.html#method-c-memory_load","()",""],["memory_load_high?","GxG::Engine","GxG/Engine.html#method-c-memory_load_high-3F","()",""],["memory_load_low?","GxG::Engine","GxG/Engine.html#method-c-memory_load_low-3F","()",""],["memory_load_medium?","GxG::Engine","GxG/Engine.html#method-c-memory_load_medium-3F","()",""],["memory_used","GxG::Engine","GxG/Engine.html#method-c-memory_used","()",""],["message_count","GxG::Networking::Pop3Client","GxG/Networking/Pop3Client.html#method-i-message_count","()",""],["message_template","GxG::Networking::SmtpClient","GxG/Networking/SmtpClient.html#method-i-message_template","(mime_type=\"text/plain\", content_parameters={\"charset\"=>\"UTF-8\"})",""],["millisecond_latency","Object","Object.html#method-i-millisecond_latency","(*args,&block)",""],["mime_type","GxG::ByteArray","GxG/ByteArray.html#method-i-mime_type","()",""],["mime_type","String","String.html#method-i-mime_type","()",""],["mkdir","GxG::Storage::FileSpace","GxG/Storage/FileSpace.html#method-i-mkdir","(the_path=\"\", permissions=nil)",""],["mkdir","GxG::Storage::Volume","GxG/Storage/Volume.html#method-i-mkdir","(subpath=\"\", permissions=nil)",""],["mkfile","GxG::Storage::FileSpace","GxG/Storage/FileSpace.html#method-i-mkfile","(the_path=\"\", options={})",""],["mkpath","GxG::Storage::FileSpace","GxG/Storage/FileSpace.html#method-i-mkpath","(the_path=\"\")",""],["mode_permission_to_gxg","File","File.html#method-c-mode_permission_to_gxg","(the_mode=0)",""],["mode_permission_to_unix","File","File.html#method-c-mode_permission_to_unix","(the_mode=0, type = :file)",""],["mount","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-mount","(mailbox=nil,mode=:read_write)",""],["mount","GxG::Storage::FileSpace","GxG/Storage/FileSpace.html#method-i-mount","(the_volume = nil, the_path = \"\")",""],["mount_mode","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-mount_mode","()",""],["mounted?","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-mounted-3F","()",""],["mounted?","GxG::Storage::FileSpace","GxG/Storage/FileSpace.html#method-i-mounted-3F","(the_path=\"\")",""],["move","GxG::Storage::FileSpace","GxG/Storage/FileSpace.html#method-i-move","(source_path=nil, destination_path=nil, options={})","<p>Moving support\n"],["move_to_mailbox","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-move_to_mailbox","(uid=nil, mailbox=nil)",""],["my_id","GxG::Communications::BridgeAdapter","GxG/Communications/BridgeAdapter.html#method-i-my_id","()",""],["my_id","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-i-my_id","()",""],["my_jid","GxG::Networking::XmppAgentConversation","GxG/Networking/XmppAgentConversation.html#method-i-my_jid","()",""],["my_roster","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-my_roster","()","<p>### Direct access to the roster\n<p>@return [Blather::Roster]\n"],["network","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-i-network","()",""],["network_next_port","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-i-network_next_port","(the_address=\"0.0.0.0\", honor_conventions=true)",""],["network_port_used?","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-i-network_port_used-3F","(the_port=0, the_address=\"0.0.0.0\")",""],["network_status","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-i-network_status","()",""],["new","Blather::DSL::MultiUserChat","Blather/DSL/MultiUserChat.html#method-c-new","(client, jid, nickname = nil, password = nil)",""],["new","Blather::MUC::Admin","Blather/MUC/Admin.html#method-c-new","(type = nil, to = nil)",""],["new","Blather::MUC::Admin::Members","Blather/MUC/Admin/Members.html#method-c-new","(*args)",""],["new","Blather::MUC::Invite","Blather/MUC/Invite.html#method-c-new","(jid = nil, reason = nil, password = nil)",""],["new","Blather::MUC::Join","Blather/MUC/Join.html#method-c-new","(password = nil)",""],["new","Blather::MUC::Owner","Blather/MUC/Owner.html#method-c-new","(type = nil, to = nil)",""],["new","Blather::MUC::Owner::Destroy","Blather/MUC/Owner/Destroy.html#method-c-new","(*args)",""],["new","Blather::Stanza::Presence::MUCUser::Status","Blather/Stanza/Presence/MUCUser/Status.html#method-c-new","(code)",""],["new","GxG::ByteArray","GxG/ByteArray.html#method-c-new","(*args,&block)","<p>instance methods:\n"],["new","GxG::Communications::Bridge","GxG/Communications/Bridge.html#method-c-new","(process=nil, the_url=nil, options=nil)",""],["new","GxG::Communications::BridgeAdapter","GxG/Communications/BridgeAdapter.html#method-c-new","(the_process=nil, the_url=nil, options=nil)",""],["new","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-c-new","(the_process=nil, the_url=nil, options={:sasl => :digest, :digest => true})",""],["new","GxG::Database::Database","GxG/Database/Database.html#method-c-new","(connection = nil, options={})",""],["new","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-c-new","(settings = {})",""],["new","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-c-new","(settings = {})",""],["new","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-c-new","(bootstrap_data={})",""],["new","GxG::Enumerator","GxG/Enumerator.html#method-c-new","(object=nil,method=:each,*args, &block)","<p>this is a bit inefficient, but it gets the job done.  It is essentially an each wrapper to do a cooperative …\n"],["new","GxG::Events::EventDispatcher","GxG/Events/EventDispatcher.html#method-c-new","(interval=0.333, thread_reservation=100)",""],["new","GxG::Events::Message","GxG/Events/Message.html#method-c-new","(*args)",""],["new","GxG::IO::Duplex","GxG/IO/Duplex.html#method-c-new","(*args)",""],["new","GxG::IO::File","GxG/IO/File.html#method-c-new","(*args)","<p>As of Ruby 1.9.2: if a file is not set to :binary mode, it defaults to :text mode. See: www.tutorialspoint.com/ruby/ruby_input_output.htm …\n"],["new","GxG::IO::IO","GxG/IO/IO.html#method-c-new","(*args)",""],["new","GxG::IO::Input","GxG/IO/Input.html#method-c-new","(*args)","<p>ensure mode is read-only, else raise Exception\n"],["new","GxG::IO::Output","GxG/IO/Output.html#method-c-new","(*args)","<p>ensure mode is write-only, else raise Exception\n"],["new","GxG::IO::StringIO","GxG/IO/StringIO.html#method-c-new","(*args)",""],["new","GxG::Networking::FtpClient","GxG/Networking/FtpClient.html#method-c-new","()",""],["new","GxG::Networking::HttpClient","GxG/Networking/HttpClient.html#method-c-new","()",""],["new","GxG::Networking::HttpsClient","GxG/Networking/HttpsClient.html#method-c-new","()",""],["new","GxG::Networking::HttpsClientWithPem","GxG/Networking/HttpsClientWithPem.html#method-c-new","(pem_file_path=nil)",""],["new","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-c-new","(host=nil, port=nil, options={})",""],["new","GxG::Networking::Pop3Client","GxG/Networking/Pop3Client.html#method-c-new","(host=nil,port=nil,options={})",""],["new","GxG::Networking::SftpClient","GxG/Networking/SftpClient.html#method-c-new","()",""],["new","GxG::Networking::SmtpClient","GxG/Networking/SmtpClient.html#method-c-new","(host=nil,port=nil,options={})",""],["new","GxG::Networking::SoapClient","GxG/Networking/SoapClient.html#method-c-new","()","<p>Standard:\n"],["new","GxG::Networking::SoapDriver","GxG/Networking/SoapDriver.html#method-c-new","(the_url=nil)","<p>Example sites to test with: www.restfulwebservices.net/rest/WeatherForecastService.svc?wsdl www.restfulwebservices.net/wcf/WeatherForecastService.svc?wsdl …\n"],["new","GxG::Networking::SshClient","GxG/Networking/SshClient.html#method-c-new","()",""],["new","GxG::Networking::XmlrpcClient","GxG/Networking/XmlrpcClient.html#method-c-new","()",""],["new","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-c-new","(options={})","<p>Initialization\n"],["new","GxG::Networking::XmppAgentConversation","GxG/Networking/XmppAgentConversation.html#method-c-new","(parent=nil, details={})",""],["new","GxG::Networking::XmppAgentFileTransfer","GxG/Networking/XmppAgentFileTransfer.html#method-c-new","(manager, direction, details, parent)","<p>Review : totally rewrite this\n"],["new","GxG::Networking::XmppAgentInvitation","GxG/Networking/XmppAgentInvitation.html#method-c-new","(parent=nil, invitation=nil)",""],["new","GxG::Networking::ZMQ::ZmqClient","GxG/Networking/ZMQ/ZmqClient.html#method-c-new","(params={})",""],["new","GxG::Networking::ZMQ::ZmqPair","GxG/Networking/ZMQ/ZmqPair.html#method-c-new","(params={})",""],["new","GxG::Networking::ZMQ::ZmqPublisher","GxG/Networking/ZMQ/ZmqPublisher.html#method-c-new","(params={})",""],["new","GxG::Networking::ZMQ::ZmqPuller","GxG/Networking/ZMQ/ZmqPuller.html#method-c-new","(params={})",""],["new","GxG::Networking::ZMQ::ZmqPusher","GxG/Networking/ZMQ/ZmqPusher.html#method-c-new","(params={})",""],["new","GxG::Networking::ZMQ::ZmqServer","GxG/Networking/ZMQ/ZmqServer.html#method-c-new","(params={})",""],["new","GxG::Networking::ZMQ::ZmqSubscriber","GxG/Networking/ZMQ/ZmqSubscriber.html#method-c-new","(params={})",""],["new","GxG::Networking::ZmqNode","GxG/Networking/ZmqNode.html#method-c-new","(*args)",""],["new","GxG::ReturnResponse","GxG/ReturnResponse.html#method-c-new","(response={})","<p>this class allows for characterized muli-part return values for Procs and Methods this was created for …\n"],["new","GxG::Storage::FileSpace","GxG/Storage/FileSpace.html#method-c-new","()",""],["new","GxG::Storage::Volume","GxG/Storage/Volume.html#method-c-new","(options={})",""],["new","GxG::Tuple","GxG/Tuple.html#method-c-new","(key=nil,value=nil)","<p>Inspired by Python&#39;s Tuple class, in this case: allows any object to be a key for any other object …\n"],["new","GxG::Version","GxG/Version.html#method-c-new","(params={})",""],["new_selector","GxG::ReturnResponse","GxG/ReturnResponse.html#method-i-new_selector","()",""],["new_structure_from_format","GxG::Database::Database","GxG/Database/Database.html#method-i-new_structure_from_format","(credential=nil, search_options={})",""],["newline_option_used","GxG::Support::Library::Transcoding","GxG/Support/Library/Transcoding.html#method-i-newline_option_used","(io_channel=:external)",""],["newline_used","GxG::Support::Library::Transcoding","GxG/Support/Library/Transcoding.html#method-i-newline_used","(io_channel=:external)",""],["next","GxG::Enumerator","GxG/Enumerator.html#method-i-next","()",""],["next_message","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-i-next_message","(the_channel_uuid=nil)",""],["next_values","GxG::Enumerator","GxG/Enumerator.html#method-i-next_values","()",""],["nitems","GxG::ByteArray","GxG/ByteArray.html#method-i-nitems","()",""],["notify","GxG::Communications::BridgeAdapter","GxG/Communications/BridgeAdapter.html#method-i-notify","(details=nil)","<p>Information Refresh\n"],["notify","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-i-notify","(details=nil)","<p>Information Refresh\n"],["notify","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-notify","(notification_type=nil)",""],["numeric_values","String","String.html#method-i-numeric_values","(categories=:any,delimiter=\"\\t\",locale=:en_US, numeric_base=10)",""],["object_memory_used","GxG::Engine","GxG/Engine.html#method-c-object_memory_used","()",""],["on","GxG::Communications::Bridge","GxG/Communications/Bridge.html#method-i-on","(the_event, description=nil, &block)","<p>Command Interface\n"],["on","GxG::Events::Message","GxG/Events/Message.html#method-i-on","(event_type=nil,&block)",""],["on_before_dispatch","GxG::Networking::SoapDriver","GxG/Networking/SoapDriver.html#method-i-on_before_dispatch","(the_document=nil)",""],["on_create_document","GxG::Networking::SoapDriver","GxG/Networking/SoapDriver.html#method-i-on_create_document","(the_document=nil)","<p>Handsoap support hooks:\n"],["on_response_document","GxG::Networking::SoapDriver","GxG/Networking/SoapDriver.html#method-i-on_response_document","(the_document=nil)",""],["online_availability_values","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-c-online_availability_values","()",""],["opaque","URI::Generic","URI/Generic.html#method-i-opaque","()",""],["opaque=","URI::Generic","URI/Generic.html#method-i-opaque-3D","(v)",""],["open","GxG::Communications::BridgeAdapter","GxG/Communications/BridgeAdapter.html#method-i-open","()",""],["open","GxG::IO::StringIO","GxG/IO/StringIO.html#method-c-open","(the_string=\"\",mode=::IO::RDWR,&block)",""],["open","GxG::Storage::FileSpace","GxG/Storage/FileSpace.html#method-i-open","(the_path=\"\", options={})",""],["open","GxG::Storage::Volume","GxG/Storage/Volume.html#method-i-open","(subpath=\"\", options={})",""],["open?","GxG::Communications::BridgeAdapter","GxG/Communications/BridgeAdapter.html#method-i-open-3F","()",""],["open?","GxG::Database::Database","GxG/Database/Database.html#method-i-open-3F","()",""],["open?","GxG::Networking::ZMQ::ZmqAdapter","GxG/Networking/ZMQ/ZmqAdapter.html#method-i-open-3F","()",""],["open_bridge","GxG::Communications","GxG/Communications.html#method-c-open_bridge","(process=nil, the_url=nil, options=nil)",""],["open_channel","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-i-open_channel","(with_jid=nil, password=nil, configuration={})",""],["open_remote_file","GxG::Networking::SftpClient","GxG/Networking/SftpClient.html#method-i-open_remote_file","(the_path=nil, permissions={})",""],["outervalue","GxG::ByteArray","GxG/ByteArray.html#method-i-outervalue","()",""],["outervalue=","GxG::ByteArray","GxG/ByteArray.html#method-i-outervalue-3D","(*args)",""],["pack","GxG::ByteArray","GxG/ByteArray.html#method-i-pack","(*args)",""],["padvalue","GxG::ByteArray","GxG/ByteArray.html#method-i-padvalue","()",""],["padvalue=","GxG::ByteArray","GxG/ByteArray.html#method-i-padvalue-3D","(*args)",""],["parent","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-parent","()",""],["parent","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-parent","()",""],["parent=","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-parent-3D","(object=nil)",""],["parse","Addrinfo","Addrinfo.html#method-c-parse","(*args)",""],["parse","URI","URI.html#method-c-parse","(*args)",""],["pass","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-pass","()","<p>### Pass responsibility to the next handler\n<p>Use this to jump out of the current handler and let the next …\n"],["passes_needed","GxG","GxG.html#method-c-passes_needed","(size_used=0, container_limit=0)","<p>Generic toolbox of methods\n"],["password","Blather::MUC::Invite","Blather/MUC/Invite.html#method-i-password","()",""],["password","Blather::Stanza::Presence::MUCJoin","Blather/Stanza/Presence/MUCJoin.html#method-i-password","()",""],["password","URI::Generic","URI/Generic.html#method-i-password","()",""],["password=","Blather::MUC::Invite","Blather/MUC/Invite.html#method-i-password-3D","(password)",""],["password=","Blather::MUC::Join","Blather/MUC/Join.html#method-i-password-3D","(password)",""],["password=","Blather::Stanza::Presence::MUCJoin","Blather/Stanza/Presence/MUCJoin.html#method-i-password-3D","(value)",""],["password=","URI::Generic","URI/Generic.html#method-i-password-3D","(password)",""],["path","URI::Generic","URI/Generic.html#method-i-path","()",""],["path=","URI::Generic","URI/Generic.html#method-i-path-3D","(v)",""],["path_prefix","GxG::Storage::FileSpace","GxG/Storage/FileSpace.html#method-i-path_prefix","(src_path=\"\", the_path=\"\")",""],["paths_to","Array","Array.html#method-i-paths_to","(the_object=nil,base_path=\"\")",""],["paths_to","GxG::ByteArray","GxG/ByteArray.html#method-i-paths_to","(object=nil,base_path=\"\")","<p>GxG Convenience Methods:\n"],["paths_to","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-paths_to","(the_object=nil,base_path=\"\")",""],["paths_to","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-paths_to","(the_object=nil,base_path=\"\")",""],["paths_to","GxG::Events::Message","GxG/Events/Message.html#method-i-paths_to","(*args)",""],["paths_to","Hash","Hash.html#method-i-paths_to","(the_object=nil,base_path=\"\")",""],["pattern_range","GxG::ByteArray","GxG/ByteArray.html#method-i-pattern_range","(the_pattern=\"\", initial_offset=0)",""],["pattern_ranges","GxG::ByteArray","GxG/ByteArray.html#method-i-pattern_ranges","(the_pattern=\"\")",""],["pause_event_queue","GxG::Events::EventDispatcher","GxG/Events/EventDispatcher.html#method-i-pause_event_queue","(queue=nil)",""],["peek","GxG::Enumerator","GxG/Enumerator.html#method-i-peek","()",""],["peek_values","GxG::Enumerator","GxG/Enumerator.html#method-i-peek_values","()",""],["pending?","GxG::Networking::XmppAgentFileTransfer","GxG/Networking/XmppAgentFileTransfer.html#method-i-pending-3F","()",""],["pending?","GxG::Networking::XmppAgentInvitation","GxG/Networking/XmppAgentInvitation.html#method-i-pending-3F","()",""],["percent_completed","GxG::Networking::XmppAgentFileTransfer","GxG/Networking/XmppAgentFileTransfer.html#method-i-percent_completed","()",""],["permission_policy","GxG::Database::Database","GxG/Database/Database.html#method-i-permission_policy","()","<p>Permission policy support:\n"],["permission_policy_load","GxG::Database::Database","GxG/Database/Database.html#method-i-permission_policy_load","()",""],["permission_policy_save","GxG::Database::Database","GxG/Database/Database.html#method-i-permission_policy_save","()",""],["permutation","GxG::ByteArray","GxG/ByteArray.html#method-i-permutation","(*args,&block)",""],["persistable?","GxG::Database::Database","GxG/Database/Database.html#method-i-persistable-3F","(the_object)",""],["pid","GxG::Engine","GxG/Engine.html#method-c-pid","(*args)",""],["pipe","GxG::IO::IO","GxG/IO/IO.html#method-c-pipe","(*args)",""],["platform","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-i-platform","()",""],["pop","GxG::ByteArray","GxG/ByteArray.html#method-i-pop","(how_many=nil)",""],["pop","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-pop","()",""],["port","GxG::Networking::SmtpClient","GxG/Networking/SmtpClient.html#method-i-port","()",""],["pos","GxG::Support::Library::SocketRW","GxG/Support/Library/SocketRW.html#method-i-pos","()",""],["pos=","GxG::Support::Library::SocketRW","GxG/Support/Library/SocketRW.html#method-i-pos-3D","(*args)",""],["post","GxG::Networking::HttpClient","GxG/Networking/HttpClient.html#method-i-post","(the_url=nil, form_data=nil, options={})",""],["post","GxG::Networking::HttpsClient","GxG/Networking/HttpsClient.html#method-i-post","(the_url=nil, form_data=nil, options={})",""],["post","GxG::Networking::HttpsClientWithPem","GxG/Networking/HttpsClientWithPem.html#method-i-post","(the_url=nil, form_data=nil, options={:follow_symlinks => true})",""],["post","GxG::Networking::RestClient","GxG/Networking/RestClient.html#method-i-post","(the_url=nil, form_data=nil, options={}, &block)",""],["post_event","GxG::Events::EventDispatcher","GxG/Events/EventDispatcher.html#method-i-post_event","(queue_name=:root,&block)",""],["post_to_event_queue","GxG::Events::EventDispatcher","GxG/Events/EventDispatcher.html#method-i-post_to_event_queue","(queue=:root,the_event=nil)",""],["ppid","GxG::Engine","GxG/Engine.html#method-c-ppid","(*args)",""],["prepare_conversion_options","GxG::Support::Library::Transcoding","GxG/Support/Library/Transcoding.html#method-i-prepare_conversion_options","(options={})","<p>Instance Methods\n"],["present_directory","GxG::Networking::FtpClient","GxG/Networking/FtpClient.html#method-i-present_directory","()",""],["print","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-print","(*args)",""],["printf","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-printf","(*args)",""],["process","Array","Array.html#method-c-process","(the_array=[],&block)","<p>Interesting research on extending ruby classes &#39;|&#39; for instance: verboselogging.com/2011/05/06/simple-ruby-pipes …\n"],["process","Array","Array.html#method-i-process","(&block)",""],["process","GxG::ByteArray","GxG/ByteArray.html#method-c-process","(the_array=GxG::ByteArray.new,&block)",""],["process","GxG::ByteArray","GxG/ByteArray.html#method-i-process","(&block)",""],["process","GxG::Events::Message","GxG/Events/Message.html#method-i-process","(&block)",""],["process","Hash","Hash.html#method-c-process","(the_hash={},&block)",""],["process","Hash","Hash.html#method-i-process","(&block)",""],["process","Struct","Struct.html#method-c-process","(the_struct=::Struct.new(nil),&block)",""],["process","Struct","Struct.html#method-i-process","(&block)",""],["process!","Array","Array.html#method-i-process-21","(&block)",""],["process!","GxG::ByteArray","GxG/ByteArray.html#method-i-process-21","(&block)",""],["process!","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-process-21","(options={:include_inactive => true}, &block)",""],["process!","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-process-21","(options={:include_inactive => true}, &block)",""],["process!","GxG::Events::Message","GxG/Events/Message.html#method-i-process-21","(&block)",""],["process!","Hash","Hash.html#method-i-process-21","(&block)",""],["process!","Struct","Struct.html#method-i-process-21","(&block)",""],["process_parameters","GxG::Support::Library::CommonIOPrepare","GxG/Support/Library/CommonIOPrepare.html#method-i-process_parameters","(*args)",""],["process_params_classes_error","GxG::Support::Library::IOPrepare","GxG/Support/Library/IOPrepare.html#method-i-process_params_classes_error","()",""],["process_params_classes_error","GxG::Support::Library::StringIOPrepare","GxG/Support/Library/StringIOPrepare.html#method-i-process_params_classes_error","()",""],["process_params_classes_valid","GxG::Support::Library::IOPrepare","GxG/Support/Library/IOPrepare.html#method-i-process_params_classes_valid","()",""],["process_params_classes_valid","GxG::Support::Library::StringIOPrepare","GxG/Support/Library/StringIOPrepare.html#method-i-process_params_classes_valid","()",""],["process_params_default_object","GxG::Support::Library::IOPrepare","GxG/Support/Library/IOPrepare.html#method-i-process_params_default_object","(the_object=nil)",""],["process_params_default_object","GxG::Support::Library::StringIOPrepare","GxG/Support/Library/StringIOPrepare.html#method-i-process_params_default_object","(the_object)",""],["process_received","GxG::Networking::XmppAgentConversation","GxG/Networking/XmppAgentConversation.html#method-i-process_received","(&block)",""],["processes","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-i-processes","(params={})",""],["product","GxG::ByteArray","GxG/ByteArray.html#method-i-product","(*others,&block)",""],["profile","GxG::Engine","GxG/Engine.html#method-c-profile","()","<p>extensions\n"],["profile","GxG::Storage::FileSpace","GxG/Storage/FileSpace.html#method-i-profile","(the_path=\"\",params=nil)",""],["profile","GxG::Storage::Volume","GxG/Storage/Volume.html#method-i-profile","(subpath=\"\",params={:follow_symlinks => true})",""],["profile","IO","IO.html#method-i-profile","(params={:follow_symlinks => true})",""],["profile","StringIO","StringIO.html#method-i-profile","()",""],["protocol","GxG::Communications::BridgeAdapter","GxG/Communications/BridgeAdapter.html#method-c-protocol","()","<p>WARNING: Only instantiate subclasses\n"],["protocol","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-c-protocol","()",""],["publish_and_subscribe","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-publish_and_subscribe","()",""],["push","Blather::Roster","Blather/Roster.html#method-i-push","(elem, send = true, groups = [\"Buddies\"])",""],["push","GxG::ByteArray","GxG/ByteArray.html#method-i-push","(*args)",""],["push","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-push","(*args)",""],["put","GxG::Networking::HttpClient","GxG/Networking/HttpClient.html#method-i-put","(the_url=nil, data=nil, options={})",""],["put","GxG::Networking::HttpsClient","GxG/Networking/HttpsClient.html#method-i-put","(the_url=nil, data=nil, options={})",""],["put","GxG::Networking::HttpsClientWithPem","GxG/Networking/HttpsClientWithPem.html#method-i-put","(the_url=nil, data=nil, options={:follow_symlinks => true})",""],["put","GxG::Networking::RestClient","GxG/Networking/RestClient.html#method-i-put","(the_url=nil, data=nil, options={}, &block)",""],["put_codepoint","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-put_codepoint","(the_object=nil)",""],["put_file","GxG::Networking::FtpClient","GxG/Networking/FtpClient.html#method-i-put_file","(local_path=nil, remote_file=nil)",""],["putc","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-putc","(the_object=nil)","<p>Transcoding &#39;write&#39; methods:\n"],["puts","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-puts","(*args)",""],["putwc","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-putwc","(the_object=nil)",""],["query","URI::Generic","URI/Generic.html#method-i-query","()",""],["query=","URI::Generic","URI/Generic.html#method-i-query-3D","(v)",""],["radio_group","Padrino::Helpers::TagHelpers","Padrino/Helpers/TagHelpers.html#method-i-radio_group","(legend=nil,button_names=nil)",""],["radio_tag","Padrino::Helpers::TagHelpers","Padrino/Helpers/TagHelpers.html#method-i-radio_tag","(the_id=nil,title=nil)",""],["rassoc","GxG::ByteArray","GxG/ByteArray.html#method-i-rassoc","(key=nil)",""],["read","GxG::IO::IO","GxG/IO/IO.html#method-i-read","(length=0,outbuffer=\"\")",""],["read","GxG::IO::StringIO","GxG/IO/StringIO.html#method-i-read","(*args)",""],["read","GxG::Support::Library::SocketRW","GxG/Support/Library/SocketRW.html#method-i-read","(*args)",""],["read_latency","IO","IO.html#method-i-read_latency","()",""],["read_latency","StringIO","StringIO.html#method-i-read_latency","()",""],["read_nonblock","GxG::IO::StringIO","GxG/IO/StringIO.html#method-i-read_nonblock","(*args)",""],["read_nonblock","GxG::Support::Library::SocketRW","GxG/Support/Library/SocketRW.html#method-i-read_nonblock","(*args)",""],["readbyte","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-readbyte","()",""],["readchar","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-readchar","(*args)",""],["readline","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-readline","(*args)",""],["readlines","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-readlines","(*args)",""],["readpartial","GxG::IO::IO","GxG/IO/IO.html#method-i-readpartial","(*args)",""],["readpartial","GxG::IO::StringIO","GxG/IO/StringIO.html#method-i-readpartial","(*args)",""],["readpartial","GxG::Support::Library::SocketRW","GxG/Support/Library/SocketRW.html#method-i-readpartial","(*args)",""],["reason","Blather::MUC::Invite","Blather/MUC/Invite.html#method-i-reason","()",""],["reason=","Blather::MUC::Invite","Blather/MUC/Invite.html#method-i-reason-3D","(reason)",""],["reason=","Blather::MUC::Owner::Destroy","Blather/MUC/Owner/Destroy.html#method-i-reason-3D","(reason)",""],["receive","GxG::Networking::ZMQ::ZmqAdapter","GxG/Networking/ZMQ/ZmqAdapter.html#method-i-receive","(**options, &block)",""],["reconstitute","GxG","GxG.html#method-c-reconstitute","(raw_data=\"\")",""],["record_separator_used","GxG::Support::Library::Transcoding","GxG/Support/Library/Transcoding.html#method-i-record_separator_used","(io_channel=:external)",""],["recv","GxG::Support::Library::SocketIO","GxG/Support/Library/SocketIO.html#method-i-recv","(bytecount=nil, flags=0)",""],["recvfrom","GxG::Support::Library::SocketIORecvFrom","GxG/Support/Library/SocketIORecvFrom.html#method-i-recvfrom","(max_mesg_length=nil, flags=0)","<p>Note: Allow aliases or existing recvfrom_nonblock to catch method references. Do not define recvfrom_nonblock …\n"],["recvmsg","GxG::Support::Library::SocketIO","GxG/Support/Library/SocketIO.html#method-i-recvmsg","(max_mesg_length=nil, flags=0, max_control_length=nil, options={})",""],["reference","GxG::Networking::XmppAgentFileTransfer","GxG/Networking/XmppAgentFileTransfer.html#method-i-reference","()",""],["refresh_conversations","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-refresh_conversations","()",""],["refresh_file_transfers","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-refresh_file_transfers","()",""],["refresh_invitations","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-refresh_invitations","()",""],["refresh_links","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-refresh_links","()",""],["refresh_links","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-refresh_links","()",""],["refresh_units_registry","GxG::Units","GxG/Units.html#method-c-refresh_units_registry","()",""],["register_handler_class","GxG::Networking","GxG/Networking.html#method-c-register_handler_class","(the_scheme=nil, the_class=nil)",""],["register_with_server","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-c-register_with_server","(the_url=nil, fields={})",""],["registered_protocols","GxG::Networking","GxG/Networking.html#method-c-registered_protocols","()",""],["registration_fields","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-c-registration_fields","()",""],["registration_info","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-c-registration_info","(the_url=nil)",""],["registry","URI::Generic","URI/Generic.html#method-i-registry","()",""],["registry=","URI::Generic","URI/Generic.html#method-i-registry-3D","(v)",""],["reject","GxG::ByteArray","GxG/ByteArray.html#method-i-reject","(&block)",""],["reject!","GxG::ByteArray","GxG/ByteArray.html#method-i-reject-21","(&block)",""],["release_element_locks","GxG::Database::Database","GxG/Database/Database.html#method-i-release_element_locks","(reservation_uuid=nil)",""],["release_event_descriptor","GxG::Engine","GxG/Engine.html#method-c-release_event_descriptor","()",""],["release_reservation","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-release_reservation","()",""],["release_reservation","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-release_reservation","()",""],["remove_buddy","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-remove_buddy","(the_jid=nil)",""],["remove_directory","GxG::Networking::FtpClient","GxG/Networking/FtpClient.html#method-i-remove_directory","(dir_name=nil)",""],["remove_directory","GxG::Networking::SftpClient","GxG/Networking/SftpClient.html#method-i-remove_directory","(the_path=nil, &block)",""],["remove_element_permissions","GxG::Database::Database","GxG/Database/Database.html#method-i-remove_element_permissions","(table=:unspecified, dbid=0, options={})",""],["remove_file","GxG::Networking::FtpClient","GxG/Networking/FtpClient.html#method-i-remove_file","(file_name=nil)",""],["remove_mailbox","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-remove_mailbox","(mailbox=nil)",""],["remove_message_flags","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-remove_message_flags","(uid=nil, flags=nil)",""],["remove_messages","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-remove_messages","(uid=nil)",""],["remove_registration","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-c-remove_registration","(the_url=nil)",""],["remove_remote_file","GxG::Networking::SftpClient","GxG/Networking/SftpClient.html#method-i-remove_remote_file","(the_path=nil, &block)",""],["remove_zmq_input","GxG::Networking::ZmqNode","GxG/Networking/ZmqNode.html#method-i-remove_zmq_input","(the_key=nil)",""],["remove_zmq_output","GxG::Networking::ZmqNode","GxG/Networking/ZmqNode.html#method-i-remove_zmq_output","(the_key=nil)",""],["rename","GxG::Networking::SftpClient","GxG/Networking/SftpClient.html#method-i-rename","(name=nil, new_name=nil,&block)",""],["rename","GxG::Storage::FileSpace","GxG/Storage/FileSpace.html#method-i-rename","(the_path=\"\", new_name=\"\", options={})",""],["rename","GxG::Storage::Volume","GxG/Storage/Volume.html#method-i-rename","(subpath=\"\", new_name=\"\", options={})",""],["rename_file","GxG::Networking::FtpClient","GxG/Networking/FtpClient.html#method-i-rename_file","(file_name=nil, new_file_name=nil)",""],["rename_mailbox","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-rename_mailbox","(mailbox=nil, new_name=nil)",""],["reopen","GxG::Networking::FtpClient","GxG/Networking/FtpClient.html#method-i-reopen","()",""],["repeated_combination","GxG::ByteArray","GxG/ByteArray.html#method-i-repeated_combination","(*args,&block)",""],["repeated_permutation","GxG::ByteArray","GxG/ByteArray.html#method-i-repeated_permutation","(*args,&block)",""],["replace","GxG::ByteArray","GxG/ByteArray.html#method-i-replace","(*args)",""],["reply","GxG::Communications::Bridge","GxG/Communications/Bridge.html#method-i-reply","(the_channel_uuid=nil, reply_body=nil, address=nil)",""],["request","GxG::Communications::Bridge","GxG/Communications/Bridge.html#method-i-request","(the_channel_uuid=nil, request_body=nil, address=nil, options={})","<p>Request/Reply Support\n"],["request","GxG::Networking::ZMQ::ZmqClient","GxG/Networking/ZMQ/ZmqClient.html#method-i-request","(message=\"\", **options)",""],["reservation","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-reservation","()",""],["reservation","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-reservation","()",""],["reservation_add_element","GxG::Database::Database","GxG/Database/Database.html#method-i-reservation_add_element","(reservation_uuid=nil, table=:unspecified, dbid=0)",""],["reservation_remove_element","GxG::Database::Database","GxG/Database/Database.html#method-i-reservation_remove_element","(reservation_uuid=nil, table=:unspecified, dbid=0)",""],["reserve_element_locks","GxG::Database::Database","GxG/Database/Database.html#method-i-reserve_element_locks","(credential=nil, manifest=[], type=:read)","<p>Element Write-Lock Handling methods\n"],["reserve_event_descriptor","GxG::Engine","GxG/Engine.html#method-c-reserve_event_descriptor","()",""],["resolve_host","URI::Generic","URI/Generic.html#method-i-resolve_host","()",""],["respond_to_event?","GxG::Communications::Bridge","GxG/Communications/Bridge.html#method-i-respond_to_event-3F","(the_event=nil)",""],["result","GxG::ReturnResponse","GxG/ReturnResponse.html#method-i-result","()",""],["resume_zmq_processing","GxG::Networking::ZmqNode","GxG/Networking/ZmqNode.html#method-i-resume_zmq_processing","()",""],["retrieve_by_address","GxG::Database::Database","GxG/Database/Database.html#method-i-retrieve_by_address","(the_address={}, credential=nil, delegate=nil)",""],["retrieve_by_uuid","GxG::Database::Database","GxG/Database/Database.html#method-i-retrieve_by_uuid","(uuid=nil, credential=nil, delegate=nil)",""],["retrieve_messages","GxG::Networking::Pop3Client","GxG/Networking/Pop3Client.html#method-i-retrieve_messages","(options={:read_only=>false},&block)",""],["reverse","GxG::ByteArray","GxG/ByteArray.html#method-i-reverse","()",""],["reverse!","GxG::ByteArray","GxG/ByteArray.html#method-i-reverse-21","()",""],["reverse_each","GxG::ByteArray","GxG/ByteArray.html#method-i-reverse_each","(&block)",""],["revoke_element_permissions","GxG::Database::Database","GxG/Database/Database.html#method-i-revoke_element_permissions","(table=:unspecified, dbid=0, credential=nil)",""],["revoke_permissions","GxG::Storage::FileSpace","GxG/Storage/FileSpace.html#method-i-revoke_permissions","(the_path=\"\", the_credential=nil)",""],["revoke_permissions","GxG::Storage::Volume","GxG/Storage/Volume.html#method-i-revoke_permissions","(subpath=\"\", the_credential=nil)",""],["revoke_permissions_by_uuid","GxG::Database::Database","GxG/Database/Database.html#method-i-revoke_permissions_by_uuid","(the_uuid=nil, credential=nil)",""],["rewind","GxG::Enumerator","GxG/Enumerator.html#method-i-rewind","()",""],["rewind","GxG::Support::Library::SocketRW","GxG/Support/Library/SocketRW.html#method-i-rewind","()",""],["rindex","GxG::ByteArray","GxG/ByteArray.html#method-i-rindex","(*args, &block)",""],["rmdir","GxG::Storage::FileSpace","GxG/Storage/FileSpace.html#method-i-rmdir","(the_path=\"\")",""],["rmdir","GxG::Storage::Volume","GxG/Storage/Volume.html#method-i-rmdir","(subpath=\"\")",""],["rmfile","GxG::Storage::FileSpace","GxG/Storage/FileSpace.html#method-i-rmfile","(the_path=\"\")",""],["rmfile","GxG::Storage::Volume","GxG/Storage/Volume.html#method-i-rmfile","(subpath=\"\")",""],["role","Blather::Stanza::Presence::MUCUser","Blather/Stanza/Presence/MUCUser.html#method-i-role","()",""],["role=","Blather::Stanza::Presence::MUCUser","Blather/Stanza/Presence/MUCUser.html#method-i-role-3D","(val)",""],["role_add_user","GxG::Database::Database","GxG/Database/Database.html#method-i-role_add_user","(role_uuid=nil, credential=nil)",""],["role_create","GxG::Database::Database","GxG/Database/Database.html#method-i-role_create","(group_uuid=nil, title=\"\", seo=\"\")",""],["role_destroy","GxG::Database::Database","GxG/Database/Database.html#method-i-role_destroy","(role_uuid=nil)",""],["role_exist?","GxG::Database::Database","GxG/Database/Database.html#method-i-role_exist-3F","(credential=nil)",""],["role_fetch","GxG::Database::Database","GxG/Database/Database.html#method-i-role_fetch","(search_options={})",""],["role_group","GxG::Database::Database","GxG/Database/Database.html#method-i-role_group","(role_uuid=nil)",""],["role_member?","GxG::Database::Database","GxG/Database/Database.html#method-i-role_member-3F","(role_uuid=nil, credential=nil)",""],["role_members","GxG::Database::Database","GxG/Database/Database.html#method-i-role_members","(role_uuid=nil)",""],["role_remove_user","GxG::Database::Database","GxG/Database/Database.html#method-i-role_remove_user","(role_uuid=nil, credential=nil)",""],["role_update","GxG::Database::Database","GxG/Database/Database.html#method-i-role_update","(role_uuid=nil, data={})",""],["rotate","GxG::ByteArray","GxG/ByteArray.html#method-i-rotate","(vector=1)",""],["rotate!","GxG::ByteArray","GxG/ByteArray.html#method-i-rotate-21","(vector=1)",""],["running?","GxG::Events::EventDispatcher","GxG/Events/EventDispatcher.html#method-i-running-3F","()",""],["sample","GxG::ByteArray","GxG/ByteArray.html#method-i-sample","(*args)",""],["save","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-save","()",""],["save","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-save","()",""],["save_version","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-save_version","()",""],["save_version","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-save_version","()",""],["say","Blather::DSL::MultiUserChat","Blather/DSL/MultiUserChat.html#method-i-say","(msg, xhtml = nil)","<p>&lt;message to=&#39;room@service&#39; type=&#39;groupchat&#39;&gt;\n\n<pre>&lt;body&gt;foo&lt;/body&gt;</pre>\n<p>&lt;/message&gt; \n"],["say","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-say","(to, msg, using = :chat)","<p>### Helper method to make sending basic messages easier\n<p>@param [Blather::JID, #to_s] to the JID of the …\n"],["say_something","GxG::Networking::XmppAgentConversation","GxG/Networking/XmppAgentConversation.html#method-i-say_something","(the_message=nil, to_jid=nil)",""],["scheme","URI::Generic","URI/Generic.html#method-i-scheme","()",""],["scheme=","URI::Generic","URI/Generic.html#method-i-scheme-3D","(scheme=\"\")",""],["search","Array","Array.html#method-c-search","(the_array=[],&block)",""],["search","Array","Array.html#method-i-search","(&block)",""],["search","GxG::ByteArray","GxG/ByteArray.html#method-c-search","(the_array=GxG::ByteArray.new,&block)",""],["search","GxG::ByteArray","GxG/ByteArray.html#method-i-search","(&block)",""],["search","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-search","(options={:include_inactive => true}, &block)",""],["search","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-search","(options={:include_inactive => true}, &block)",""],["search","GxG::Events::Message","GxG/Events/Message.html#method-i-search","(&block)",""],["search","Hash","Hash.html#method-c-search","(the_hash={},&block)",""],["search","Hash","Hash.html#method-i-search","(&block)",""],["search","Struct","Struct.html#method-c-search","(the_struct=::Struct.new(nil),&block)",""],["search","Struct","Struct.html#method-i-search","(&block)",""],["search_database","GxG::Database::Database","GxG/Database/Database.html#method-i-search_database","(credential=nil, criteria={})",""],["select","GxG::ByteArray","GxG/ByteArray.html#method-i-select","(&block)",""],["select!","GxG::ByteArray","GxG/ByteArray.html#method-i-select-21","(&block)",""],["send","EZMQ::Publisher","EZMQ/Publisher.html#method-i-send","(message=\"\", topic='', **options)",""],["send","GxG::Networking::ZMQ::ZmqAdapter","GxG/Networking/ZMQ/ZmqAdapter.html#method-i-send","(message=\"\", **options)",""],["send","GxG::Networking::ZMQ::ZmqPublisher","GxG/Networking/ZMQ/ZmqPublisher.html#method-i-send","(message=\"\", topic='', **options)",""],["send","GxG::Support::Library::SocketIO","GxG/Support/Library/SocketIO.html#method-i-send","(data=\"\", flags=0, destination_socket_address=nil, *controls)",""],["send_account_info","GxG::Networking::FtpClient","GxG/Networking/FtpClient.html#method-i-send_account_info","(acct_info=nil)",""],["send_caps","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-send_caps","()","<p>Send capabilities to the server\n"],["send_command","GxG::Networking::FtpClient","GxG/Networking/FtpClient.html#method-i-send_command","(command=nil)",""],["send_command","GxG::Networking::SshClient","GxG/Networking/SshClient.html#method-i-send_command","(the_command=nil)",""],["send_file","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-send_file","(the_jid=nil,the_path=nil, description=nil, buffer_size=4096, proxy=nil)",""],["send_invitations","GxG::Networking::XmppAgentConversation","GxG/Networking/XmppAgentConversation.html#method-i-send_invitations","(the_recipients=nil, reason=nil)",""],["send_message","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-i-send_message","(the_channel_uuid=nil, message=nil, recipient=nil, use_fallback_key=false)","<p>Messages\n"],["send_message","GxG::Networking::SmtpClient","GxG/Networking/SmtpClient.html#method-i-send_message","(gxg_message=nil)",""],["sender","GxG::Events::Message","GxG/Events/Message.html#method-i-sender","()",""],["sendmsg","GxG::Support::Library::SocketIO","GxG/Support/Library/SocketIO.html#method-i-sendmsg","(data=\"\", flags=0, destination_socket_address=nil, *controls)",""],["serialize","GxG::Database::Database","GxG/Database/Database.html#method-i-serialize","()","<p>### Various methods Comm objects cannot be serialized - return encoded nil\n"],["serialize","Object","Object.html#method-i-serialize","()",""],["serialized?","String","String.html#method-i-serialized-3F","()","<p>Encoding format detection and handling: Serialized, JSON &amp; binhex(base64)\n"],["service_ports","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-i-service_ports","()","<p>Services general port usage reference data\n"],["service_ports_register","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-i-service_ports_register","(service, entry={})",""],["service_ports_register_alias","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-i-service_ports_register_alias","(service,alias_name)",""],["service_ports_register_client","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-i-service_ports_register_client","(service,client_scheme)",""],["service_ports_register_usage","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-i-service_ports_register_usage","(service,the_protocol,the_entry_port)",""],["service_ports_remove_alias","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-i-service_ports_remove_alias","(service,alias_name)",""],["service_ports_remove_client","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-i-service_ports_remove_client","(service,client_scheme)",""],["service_ports_search","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-i-service_ports_search","(criteria={})",""],["service_ports_usage_preference","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-i-service_ports_usage_preference","(service,preference=nil)",""],["services_file","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-i-services_file","()",""],["session_id","GxG::Networking::XmppAgentFileTransfer","GxG/Networking/XmppAgentFileTransfer.html#method-i-session_id","()",""],["set_at_path","Array","Array.html#method-i-set_at_path","(the_path=\"/\",the_value=nil)",""],["set_at_path","GxG::ByteArray","GxG/ByteArray.html#method-i-set_at_path","(the_path=\"/\",the_value=nil)",""],["set_at_path","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-set_at_path","(the_path=\"/\",the_value=nil)",""],["set_at_path","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-set_at_path","(the_path=\"/\",the_value=nil)",""],["set_at_path","GxG::Events::Message","GxG/Events/Message.html#method-i-set_at_path","(*args)",""],["set_at_path","Hash","Hash.html#method-i-set_at_path","(the_path=\"/\",the_value=nil)",""],["set_caps","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-set_caps","(node, identities, features)","<p>### Set the capabilities of the client\n<p>@param [String] node the URI @param [Array&lt;Hash&gt;] identities …\n"],["set_configuration","Blather::DSL::MultiUserChat","Blather/DSL/MultiUserChat.html#method-i-set_configuration","(values, &block)",""],["set_constraint","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-set_constraint","(format_uuid=nil)",""],["set_default_configuration","Blather::DSL::MultiUserChat","Blather/DSL/MultiUserChat.html#method-i-set_default_configuration","(&block)","\n<pre>&lt;iq type=&#39;set&#39; id=&#39;purple52b37aa2&#39; to=&#39;test3@conference.macbook.local&#39;&gt;\n &lt;query xmlns=&#39;http://jabber.org/protocol/muc#owner&#39;&gt; ...</pre>\n"],["set_delegate","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-set_delegate","(the_delegate=nil)",""],["set_delegate","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-set_delegate","(the_delegate=nil)",""],["set_element_version","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-set_element_version","(element_index, the_version=nil)",""],["set_element_version","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-set_element_version","(element_key, the_version=nil)",""],["set_engine_data","GxG::Engine","GxG/Engine.html#method-c-set_engine_data","(keys=[])",""],["set_format","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-set_format","(format_uuid=nil)",""],["set_fragment","URI::Generic","URI/Generic.html#method-i-set_fragment","(v)",""],["set_host","URI::Generic","URI/Generic.html#method-i-set_host","(v)",""],["set_key","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-i-set_key","(recipient=nil, password=nil)","<p>Keychain\n"],["set_message_attributes","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-set_message_attributes","(uid=nil, attributes=nil, flags=nil)",""],["set_opaque","URI::Generic","URI/Generic.html#method-i-set_opaque","(v)",""],["set_parent","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-set_parent","(object=nil)",""],["set_parent","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-set_parent","(object=nil)",""],["set_password","URI::Generic","URI/Generic.html#method-i-set_password","(v)",""],["set_path","URI::Generic","URI/Generic.html#method-i-set_path","(v)",""],["set_permissions","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-set_permissions","(credential=nil, the_permission=nil)",""],["set_permissions","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-set_permissions","(credential=nil, the_permission=nil)",""],["set_permissions","GxG::Storage::FileSpace","GxG/Storage/FileSpace.html#method-i-set_permissions","(the_path=\"\", the_credential=nil, the_permissions={})",""],["set_permissions","GxG::Storage::Volume","GxG/Storage/Volume.html#method-i-set_permissions","(subpath=\"\", the_credential=nil, the_permissions={})",""],["set_permissions_recursive","GxG::Storage::Volume","GxG/Storage/Volume.html#method-i-set_permissions_recursive","(subpath=\"\", the_credential=nil, the_permissions={})",""],["set_query","URI::Generic","URI/Generic.html#method-i-set_query","(v)",""],["set_registry","URI::Generic","URI/Generic.html#method-i-set_registry","(v)",""],["set_scheme","URI::Generic","URI/Generic.html#method-i-set_scheme","(v)",""],["set_status","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-set_status","(state = nil, msg = nil)","<p>### Set current status\n<p>@param [Blather::Stanza::Presence::State::VALID_STATES] state the current state …\n"],["set_system_proxy","GxG::Networking::RestClient","GxG/Networking/RestClient.html#method-c-set_system_proxy","(the_url=nil)",""],["set_title","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-set_title","(the_title=nil)",""],["set_title","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-set_title","(the_title=nil)",""],["set_userinfo","URI::Generic","URI/Generic.html#method-i-set_userinfo","(user, password = nil)",""],["set_version","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-set_version","(the_version=0.0)",""],["set_version","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-set_version","(the_version=0.0)",""],["setpgid","GxG::Engine","GxG/Engine.html#method-c-setpgid","(*args)",""],["setpgrp","GxG::Engine","GxG/Engine.html#method-c-setpgrp","(*args)",""],["setpriority","GxG::Engine","GxG/Engine.html#method-c-setpriority","(*args)",""],["setrlimit","GxG::Engine","GxG/Engine.html#method-c-setrlimit","(*args)",""],["setsid","GxG::Engine","GxG/Engine.html#method-c-setsid","(*args)",""],["setting_keys","GxG::Database::Database","GxG/Database/Database.html#method-i-setting_keys","()","<p>Settings methods\n"],["shell","Kernel","Kernel.html#method-i-shell","(command=nil,&block)",""],["shift","GxG::ByteArray","GxG/ByteArray.html#method-i-shift","()",""],["shuffle","GxG::ByteArray","GxG/ByteArray.html#method-i-shuffle","(*args)",""],["shuffle!","GxG::ByteArray","GxG/ByteArray.html#method-i-shuffle-21","(*args)",""],["shutdown","GxG","GxG.html#method-c-shutdown","()",""],["shutdown","GxG::Events::EventDispatcher","GxG/Events/EventDispatcher.html#method-i-shutdown","()",""],["size","GxG::ByteArray","GxG/ByteArray.html#method-i-size","()",""],["size","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-size","()",""],["size","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-size","()",""],["slice","GxG::ByteArray","GxG/ByteArray.html#method-i-slice","(indexer=0, length=nil)",""],["slice!","GxG::ByteArray","GxG/ByteArray.html#method-i-slice-21","(indexer=0, length=nil)",""],["slice_bytes","String","String.html#method-i-slice_bytes","(*args)",""],["slider_tag","Padrino::Helpers::TagHelpers","Padrino/Helpers/TagHelpers.html#method-i-slider_tag","(the_id=nil, options={})",""],["slots_used","Kernel","Kernel.html#method-i-slots_used","(counted=[], options={})","<p>alias :stock_enum_for :enum_for alias :stock_to_enum :to_enum def enum_for(method=:each,*args)\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">GxG</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Enumerator</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-keyword\">self</span>,<span class=\"ruby-identifier\">method</span>,<span class=\"ruby-operator\">*</span><span class=\"ruby-identifier\">args</span>)\n</pre>\n"],["socket","GxG::Networking::ZMQ::ZmqAdapter","GxG/Networking/ZMQ/ZmqAdapter.html#method-i-socket","()",""],["sort","GxG::ByteArray","GxG/ByteArray.html#method-i-sort","(&block)","<p>BETA: ByteArray : see about self.to_a replacement (memory efficiency) in sort methods.\n"],["sort","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-sort","(sort_keys=[\"DATE\"], search_keys=[\"ALL\"], charset=\"UTF-8\")",""],["sort!","GxG::ByteArray","GxG/ByteArray.html#method-i-sort-21","(&block)",""],["sort_by!","GxG::ByteArray","GxG/ByteArray.html#method-i-sort_by-21","(&block)",""],["spawn","GxG::Engine","GxG/Engine.html#method-c-spawn","(*args)",""],["spinner_tab","Padrino::Helpers::TagHelpers","Padrino/Helpers/TagHelpers.html#method-i-spinner_tab","(the_id=nil, options={})",""],["split_camelcase","String","String.html#method-i-split_camelcase","()",""],["sql_statement?","GxG","GxG.html#method-c-sql_statement-3F","(the_string)",""],["startup","GxG::Events::EventDispatcher","GxG/Events/EventDispatcher.html#method-i-startup","()",""],["stat","StringIO","StringIO.html#method-i-stat","(*args)",""],["status","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-i-status","()",""],["status","GxG::Networking::FtpClient","GxG/Networking/FtpClient.html#method-i-status","()",""],["status","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-status","(mailbox=nil)",""],["status=","Blather::DSL::MultiUserChat","Blather/DSL/MultiUserChat.html#method-i-status-3D","(state)","<p>&lt;presence\n\n<pre>  from=&#39;wiccarocks@shakespeare.lit/laptop&#39;\n  to=&#39;darkcave@chat.shakespeare.lit/oldhag&#39;&gt;\n&lt;show&gt;available&lt;/show&gt;</pre>\n"],["status=","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-i-status-3D","(the_status=nil, message=nil)",""],["structural_link","GxG::Database::Database","GxG/Database/Database.html#method-i-structural_link","(the_uuid=nil)",""],["structure_attached?","GxG::Database::Database","GxG/Database/Database.html#method-i-structure_attached-3F","(the_uuid=nil)",""],["structure_attached?","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-structure_attached-3F","()",""],["structure_attached?","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-structure_attached-3F","()",""],["structure_detach","GxG::Database::Database","GxG/Database/Database.html#method-i-structure_detach","(the_uuid=nil)",""],["structure_detach","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-structure_detach","()",""],["structure_detach","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-structure_detach","()",""],["subject","GxG::Events::Message","GxG/Events/Message.html#method-i-subject","()",""],["subject=","Blather::DSL::MultiUserChat","Blather/DSL/MultiUserChat.html#method-i-subject-3D","(body)","<p>&lt;message to=&#39;room@service&#39; type=&#39;groupchat&#39;&gt;\n\n<pre>&lt;subject&gt;foo&lt;/subject&gt;</pre>\n<p>&lt;/message&gt; …\n"],["subpath","GxG::Storage::FileSpace","GxG/Storage/FileSpace.html#method-i-subpath","(src_path=\"\", the_path=\"\")",""],["subscribe","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-subscribe","(mailbox=nil)",""],["subscribe","GxG::Networking::ZMQ::ZmqSubscriber","GxG/Networking/ZMQ/ZmqSubscriber.html#method-i-subscribe","(topic=\"\")",""],["succeed","GxG::Events::Message","GxG/Events/Message.html#method-i-succeed","(input=nil)",""],["symbolize_keys","Hash","Hash.html#method-i-symbolize_keys","()","<p>def to_xml_simple(options={})\n\n<pre class=\"ruby\"><span class=\"ruby-comment\">#      keyattr keeproot contentkey noattr rootname</span>\n<span class=\"ruby-comment\">#      xmldeclaration ...</span>\n</pre>\n"],["sync_export","GxG::Database::Database","GxG/Database/Database.html#method-i-sync_export","(credential=nil, uuid_list=[], options={})",""],["sync_export","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-sync_export","(options={})",""],["sync_export","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-sync_export","(options={})",""],["sync_import","GxG::Database::Database","GxG/Database/Database.html#method-i-sync_import","(credential=nil, the_records={:formats => {}, :records => []}, options={})",""],["synchronize_records","GxG::Database::Database","GxG/Database/Database.html#method-i-synchronize_records","(the_records=[], credential=nil, options={})","<p>Synchronize records: (and supports)\n"],["sysread","GxG::IO::StringIO","GxG/IO/StringIO.html#method-i-sysread","(*args)",""],["sysread","GxG::Support::Library::SocketRW","GxG/Support/Library/SocketRW.html#method-i-sysread","(*args)",""],["system_info","GxG::Networking::FtpClient","GxG/Networking/FtpClient.html#method-i-system_info","()",""],["syswrite","GxG::IO::StringIO","GxG/IO/StringIO.html#method-i-syswrite","(data=\"\")",""],["syswrite","GxG::Support::Library::SocketRW","GxG/Support/Library/SocketRW.html#method-i-syswrite","(data=\"\")",""],["tabs_tag","Padrino::Helpers::TagHelpers","Padrino/Helpers/TagHelpers.html#method-i-tabs_tag","(the_id=nil, sections=nil, options={})",""],["take","GxG::ByteArray","GxG/ByteArray.html#method-i-take","(length)",""],["take_while","GxG::ByteArray","GxG/ByteArray.html#method-i-take_while","(&block)",""],["templates","GxG::Communications::BridgeAdapter","GxG/Communications/BridgeAdapter.html#method-c-templates","()",""],["templates","GxG::Communications::BridgeAdapterXMPP","GxG/Communications/BridgeAdapterXMPP.html#method-c-templates","()",""],["terminate","GxG::Networking::ZmqNode","GxG/Networking/ZmqNode.html#method-i-terminate","()",""],["theaded_list","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-theaded_list","(algorithm=nil,search_keys=nil, charset=\"UTF-8\")",""],["tick","GxG::Events::EventDispatcher","GxG/Events/EventDispatcher.html#method-i-tick","()",""],["times","GxG::Engine","GxG/Engine.html#method-c-times","(*args)",""],["title","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-title","()",""],["title","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-title","()",""],["title","GxG::Networking::XmppAgentConversation","GxG/Networking/XmppAgentConversation.html#method-i-title","()",""],["title=","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-title-3D","(the_title=nil)",""],["to_a","GxG::ByteArray","GxG/ByteArray.html#method-i-to_a","()",""],["to_ary","GxG::ByteArray","GxG/ByteArray.html#method-i-to_ary","()",""],["to_datetime","Time","Time.html#method-i-to_datetime","()",""],["to_hash","URI::Generic","URI/Generic.html#method-i-to_hash","()",""],["to_json","GxG::ByteArray","GxG/ByteArray.html#method-i-to_json","()",""],["to_path","GxG::IO::File","GxG/IO/File.html#method-i-to_path","()",""],["to_s","GxG::ByteArray","GxG/ByteArray.html#method-i-to_s","()",""],["to_s","GxG::Tuple","GxG/Tuple.html#method-i-to_s","()",""],["to_s","GxG::Version","GxG/Version.html#method-i-to_s","()",""],["to_s","URI::Generic","URI/Generic.html#method-i-to_s","()",""],["to_uri","GxG::Database::Database","GxG/Database/Database.html#method-i-to_uri","()",""],["to_uri","String","String.html#method-i-to_uri","()",""],["transcode","String","String.html#method-i-transcode","(*args)",""],["transcode!","String","String.html#method-i-transcode-21","(*args)",""],["transcode_options","String","String.html#method-c-transcode_options","(destination_encoding, source_encoding, options={})","<p>:macos text handling notes: hints.macworld.com/article.php?story=20060825071728278 Also, research UTF8_MAC …\n"],["transcode_to_external","GxG::Support::Library::Transcoding","GxG/Support/Library/Transcoding.html#method-i-transcode_to_external","(the_string=\"\")","<p>TODO: GxG::StringIO : transcoding methods : tie into conversion-options-set-selector supports (dst-encoding,src-encoding). …\n"],["transcode_to_internal","GxG::Support::Library::Transcoding","GxG/Support/Library/Transcoding.html#method-i-transcode_to_internal","(the_string=\"\")",""],["transcoded_bytes","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-transcoded_bytes","(&block)",""],["transpose","GxG::ByteArray","GxG/ByteArray.html#method-i-transpose","()",""],["try_convert","GxG::ByteArray","GxG/ByteArray.html#method-c-try_convert","(*args)",""],["try_persist","GxG::Database::Database","GxG/Database/Database.html#method-i-try_persist","(the_object=nil, credential=nil, options={})",""],["ufs","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-ufs","()",""],["ufs","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-ufs","()",""],["uid","GxG::Engine","GxG/Engine.html#method-c-uid","(*args)",""],["uid_list","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-uid_list","(criteria=[\"NEW\"])",""],["unbind","Blather::Client","Blather/Client.html#method-i-unbind","()",""],["unget_transcoded_byte","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-unget_transcoded_byte","(the_byte=nil)",""],["unget_transcoded_bytes","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-unget_transcoded_bytes","(*args)",""],["ungetbyte","GxG::Support::Library::SocketRW","GxG/Support/Library/SocketRW.html#method-i-ungetbyte","()",""],["ungetbyte","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-ungetbyte","(the_byte=nil)",""],["ungetbytes","GxG::Support::Library::SocketRW","GxG/Support/Library/SocketRW.html#method-i-ungetbytes","()",""],["ungetbytes","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-ungetbytes","(*args)",""],["ungetc","GxG::Support::Library::SocketRW","GxG/Support/Library/SocketRW.html#method-i-ungetc","()",""],["ungetc","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-ungetc","(the_character=\"\")",""],["ungets","GxG::Support::Library::SocketRW","GxG/Support/Library/SocketRW.html#method-i-ungets","()",""],["ungets","GxG::Support::Library::TranscodingIO","GxG/Support/Library/TranscodingIO.html#method-i-ungets","(*args)",""],["uniq","GxG::ByteArray","GxG/ByteArray.html#method-i-uniq","(&block)",""],["uniq!","GxG::ByteArray","GxG/ByteArray.html#method-i-uniq-21","(&block)",""],["unit_interpreters","GxG::Units","GxG/Units.html#method-c-unit_interpreters","(categories=:any)","<p>this module is used for interpreting text into denominations and multipliers., and general support for …\n"],["unix_permissions_to_gxg","File","File.html#method-c-unix_permissions_to_gxg","(permission_string=\"\")",""],["unload","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-unload","(indexer=nil)",""],["unload","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-unload","(key=nil)",""],["unlock","Blather::DSL::MultiUserChat","Blather/DSL/MultiUserChat.html#method-i-unlock","(&block)",""],["unmount","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-unmount","()",""],["unmount","GxG::Storage::FileSpace","GxG/Storage/FileSpace.html#method-i-unmount","(the_path=\"\")",""],["unpack_bytes","String","String.html#method-i-unpack_bytes","(format_template_string=\"\")",""],["unpause_event_queue","GxG::Events::EventDispatcher","GxG/Events/EventDispatcher.html#method-i-unpause_event_queue","(queue=nil)",""],["unpersist","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-unpersist","()",""],["unpersist","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-unpersist","()",""],["unregister_handler_class","GxG::Networking","GxG/Networking.html#method-c-unregister_handler_class","(the_scheme=nil)",""],["unserialize","String","String.html#method-i-unserialize","()",""],["unshift","GxG::ByteArray","GxG/ByteArray.html#method-i-unshift","(*args)",""],["unsubscribe","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-unsubscribe","(mailbox=nil)",""],["unsubscribe","GxG::Networking::ZMQ::ZmqSubscriber","GxG/Networking/ZMQ/ZmqSubscriber.html#method-i-unsubscribe","(topic=\"\")",""],["update_vfs_permission","GxG::Database::Database","GxG/Database/Database.html#method-i-update_vfs_permission","(file_id=nil, credential=nil, permission={:execute => false, :rename => false, :move => false, :destroy => false, :create => false, :write => false, :read => false})",""],["upload","GxG::Networking::SftpClient","GxG/Networking/SftpClient.html#method-i-upload","(the_local_source=nil, the_destination=nil, options={}, &progress_block)",""],["upload","GxG::Networking::SshClient","GxG/Networking/SshClient.html#method-i-upload","(the_local_source=nil, the_destination=nil, options={}, &progress_block)",""],["upload_file","GxG::Networking::XmppAgentFileTransfer","GxG/Networking/XmppAgentFileTransfer.html#method-i-upload_file","(proxy=nil)",""],["upload_message","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-upload_message","(mailbox=nil, gxg_message=nil, flags=[:Seen], timestamp=::Time.now)",""],["uri_info","Addrinfo","Addrinfo.html#method-i-uri_info","()",""],["user","URI::Generic","URI/Generic.html#method-i-user","()",""],["user=","URI::Generic","URI/Generic.html#method-i-user-3D","(user)",""],["user_create","GxG::Database::Database","GxG/Database/Database.html#method-i-user_create","(the_user_id=\"\", the_password=\"\", use_credential=nil)",""],["user_credential","GxG::Database::Database","GxG/Database/Database.html#method-i-user_credential","(the_user_id=\"\", the_password=\"\")",""],["user_destroy","GxG::Database::Database","GxG/Database/Database.html#method-i-user_destroy","(credential=nil)",""],["user_exist?","GxG::Database::Database","GxG/Database/Database.html#method-i-user_exist-3F","(the_user_id)",""],["user_fetch","GxG::Database::Database","GxG/Database/Database.html#method-i-user_fetch","(search_options={})",""],["user_id_available?","GxG::Database::Database","GxG/Database/Database.html#method-i-user_id_available-3F","(the_user_id)",""],["user_manifest","GxG::Database::Database","GxG/Database/Database.html#method-i-user_manifest","(include_password=false)","<p>User, Role, and Group methods\n"],["user_roles","GxG::Database::Database","GxG/Database/Database.html#method-i-user_roles","(credential=nil)",""],["user_set_password","GxG::Database::Database","GxG/Database/Database.html#method-i-user_set_password","(credential=nil, old_password=\"\", new_password=\"\")",""],["user_update","GxG::Database::Database","GxG/Database/Database.html#method-i-user_update","(credential=nil, user_id=nil)",""],["userinfo","URI::Generic","URI/Generic.html#method-i-userinfo","()",""],["uuid","GxG::Communications::Bridge","GxG/Communications/Bridge.html#method-i-uuid","()",""],["uuid","GxG::Communications::BridgeAdapter","GxG/Communications/BridgeAdapter.html#method-i-uuid","()",""],["uuid","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-uuid","()",""],["uuid","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-uuid","()","<p>Review : favor the following more Ruby-like accessors over the set_xxx style methods, eliminate older …\n"],["uuid","GxG::Networking::XmppAgentConversation","GxG/Networking/XmppAgentConversation.html#method-i-uuid","()",""],["uuid","GxG::Networking::XmppAgentInvitation","GxG/Networking/XmppAgentInvitation.html#method-i-uuid","()",""],["uuid=","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-uuid-3D","(the_uuid=nil)",""],["uuid_generate","GxG","GxG.html#method-c-uuid_generate","()",""],["uuid_list","GxG::Database::Database","GxG/Database/Database.html#method-i-uuid_list","(credential=nil, criteria={})","<p>Search function method\n"],["valid_date?","String","String.html#method-i-valid_date-3F","()",""],["valid_datetime?","String","String.html#method-i-valid_datetime-3F","()",""],["valid_datetime_nolocale?","String","String.html#method-i-valid_datetime_nolocale-3F","()",""],["valid_domain_name?","GxG","GxG.html#method-c-valid_domain_name-3F","(the_string)",""],["valid_field_classes","GxG::Database::Database","GxG/Database/Database.html#method-c-valid_field_classes","()",""],["valid_jid?","String","String.html#method-i-valid_jid-3F","()",""],["valid_mode_set","GxG::IO::IO","GxG/IO/IO.html#method-c-valid_mode_set","(params={})",""],["valid_modes","GxG::Entity::LocalSystem","GxG/Entity/LocalSystem.html#method-i-valid_modes","()",""],["valid_modes","GxG::IO::IO","GxG/IO/IO.html#method-c-valid_modes","()",""],["valid_path?","GxG::Storage::FileSpace","GxG/Storage/FileSpace.html#method-i-valid_path-3F","(the_path=\"\")",""],["valid_path?","String","String.html#method-i-valid_path-3F","()",""],["valid_time?","String","String.html#method-i-valid_time-3F","()",""],["valid_uri?","String","String.html#method-i-valid_uri-3F","()","<p>def from_html(options={})\n\n<pre>#\nunless options[:no_test] == true\n  unless self.html?()\n    raise Exception, ...</pre>\n"],["valid_uuid?","GxG","GxG.html#method-c-valid_uuid-3F","(uuid=nil,strict=true)",""],["value","GxG::Tuple","GxG/Tuple.html#method-i-value","()",""],["value","GxG::Version","GxG/Version.html#method-i-value","()",""],["value=","GxG::Tuple","GxG/Tuple.html#method-i-value-3D","(new_value=nil)",""],["values_at","GxG::ByteArray","GxG/ByteArray.html#method-i-values_at","(*args)",""],["version","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-version","(input=nil)",""],["version","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-version","()",""],["version=","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-version-3D","(the_version=nil)",""],["version=","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-version-3D","(the_version=nil)",""],["vetted_parameters","GxG::Networking::ZMQ::ZmqAdapter","GxG/Networking/ZMQ/ZmqAdapter.html#method-i-vetted_parameters","(params={})","\n<pre>Proposed: {:bind/connect =&gt; &lt;URI&gt;, :context =&gt; &lt;Context&gt;, :encode =&gt; &lt;Proc&gt;, :decode =&gt; &lt;Proc&gt;}\nmode ...</pre>\n"],["vfs_permission","GxG::Database::Database","GxG/Database/Database.html#method-i-vfs_permission","(file_id=nil, credential=nil)",""],["vfs_permission_exist?","GxG::Database::Database","GxG/Database/Database.html#method-i-vfs_permission_exist-3F","(file_id=nil, credential=nil)","<p>Effective Permission Handling methods VFS File permission mappings\n"],["vfs_permission_manifest","GxG::Database::Database","GxG/Database/Database.html#method-i-vfs_permission_manifest","(file_id=nil, credential=nil)",""],["volume_of_path","GxG::Storage::FileSpace","GxG/Storage/FileSpace.html#method-i-volume_of_path","(the_path=\"\")",""],["wait","GxG::Engine","GxG/Engine.html#method-c-wait","(*args)",""],["wait2","GxG::Engine","GxG/Engine.html#method-c-wait2","(*args)",""],["wait_for_reservation","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-wait_for_reservation","(timeout=nil)",""],["wait_for_reservation","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-wait_for_reservation","(timeout=nil)",""],["waitall","GxG::Engine","GxG/Engine.html#method-c-waitall","(*args)",""],["waitpid","GxG::Engine","GxG/Engine.html#method-c-waitpid","(*args)",""],["waitpid2","GxG::Engine","GxG/Engine.html#method-c-waitpid2","(*args)",""],["warning","GxG::ReturnResponse","GxG/ReturnResponse.html#method-i-warning","()",""],["wget","GxG::Networking","GxG/Networking.html#method-c-wget","(the_url=nil, options={})",""],["when_ready","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-when_ready","(&block)","<p>### Wrapper for “handle :ready” (just a bit of syntactic sugar)\n<p>This is run after the connection …\n"],["with_index","GxG::Enumerator","GxG/Enumerator.html#method-i-with_index","(offset=0,&block)",""],["with_object","GxG::Enumerator","GxG/Enumerator.html#method-i-with_object","(an_object=nil,&block)",""],["write","Blather::DSL::MultiUserChat","Blather/DSL/MultiUserChat.html#method-i-write","(stanza)",""],["write","GxG::IO::IO","GxG/IO/IO.html#method-i-write","(data=\"\")",""],["write","GxG::IO::StringIO","GxG/IO/StringIO.html#method-i-write","(data=\"\")",""],["write","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-write","(stanza)","<p>Support Methods\n"],["write","GxG::Support::Library::SocketRW","GxG/Support/Library/SocketRW.html#method-i-write","(data=\"\")",""],["write_latency","IO","IO.html#method-i-write_latency","()",""],["write_latency","StringIO","StringIO.html#method-i-write_latency","()",""],["write_nonblock","GxG::IO::StringIO","GxG/IO/StringIO.html#method-i-write_nonblock","(data=\"\")",""],["write_nonblock","GxG::Support::Library::SocketRW","GxG/Support/Library/SocketRW.html#method-i-write_nonblock","(data=\"\")",""],["write_permission?","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-write_permission-3F","()",""],["write_permission?","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-write_permission-3F","()",""],["write_reserved?","GxG::Database::PersistedArray","GxG/Database/PersistedArray.html#method-i-write_reserved-3F","()",""],["write_reserved?","GxG::Database::PersistedHash","GxG/Database/PersistedHash.html#method-i-write_reserved-3F","()",""],["write_to_stream","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-write_to_stream","(stanza)","<p>### Write data to the stream\n<p>@param [#to_xml, #to_s] stanza the data to send down the wire.\n"],["write_with_handler","Blather::DSL::MultiUserChat","Blather/DSL/MultiUserChat.html#method-i-write_with_handler","(stanza, &block)",""],["xlist","GxG::Networking::ImapClient","GxG/Networking/ImapClient.html#method-i-xlist","(reference=nil, mailbox=nil)",""],["xml?","String","String.html#method-i-xml-3F","()",""],["xmpp_message_to_gxg","GxG::Networking::XmppAgent","GxG/Networking/XmppAgent.html#method-i-xmpp_message_to_gxg","(the_message=nil)","<p>Conversion Tools\n"],["zip","GxG::ByteArray","GxG/ByteArray.html#method-i-zip","(*args,&block)",""],["zmq_default_context","GxG::Networking::ZMQ","GxG/Networking/ZMQ.html#method-c-zmq_default_context","()",""],["zmq_error_handler","GxG::Networking::ZmqNode","GxG/Networking/ZmqNode.html#method-i-zmq_error_handler","(params={})",""],["zmq_handler","GxG::Networking::ZmqNode","GxG/Networking/ZmqNode.html#method-i-zmq_handler","(params={})",""],["zmq_inputs","GxG::Networking::ZmqNode","GxG/Networking/ZmqNode.html#method-i-zmq_inputs","()",""],["zmq_outputs","GxG::Networking::ZmqNode","GxG/Networking/ZmqNode.html#method-i-zmq_outputs","()",""],["zmq_process","GxG::Networking::ZmqNode","GxG/Networking/ZmqNode.html#method-i-zmq_process","()",""],["zmq_processing?","GxG::Networking::ZmqNode","GxG/Networking/ZmqNode.html#method-i-zmq_processing-3F","()",""],["zmq_supported_protocols","GxG::Networking::ZMQ","GxG/Networking/ZMQ.html#method-c-zmq_supported_protocols","()",""],["|","GxG::ByteArray","GxG/ByteArray.html#method-i-7C","(*args)",""],["README","","README_md.html","","<p>gxg-framework\n<p>GxG Framework for JRuby\n"],["gxg.gemspec","","gxg_gemspec.html","","<p>Gem::Specification.new do |s|\n\n<pre>s.name        = &#39;gxg&#39;\ns.version     = &#39;0.0.40&#39;\ns.licenses    = [&#39;UNLICENSED&#39;] ...</pre>\n"]]}}